
Task0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001346  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00001346  000013da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  00800078  00800078  000013f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000175b  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cfb  00000000  00000000  00002dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00003af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007bc  00000000  00000000  00004ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d9  00000000  00000000  00005488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f92  00000000  00000000  00005d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00006cf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__vector_1>
       8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 c9 04 	jmp	0x992	; 0x992 <__vector_6>
      1c:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__vector_7>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 9b 04 	jmp	0x936	; 0x936 <__vector_9>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 08 04 	jmp	0x810	; 0x810 <__vector_11>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__vector_13>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__vector_15>
      40:	0c 94 a2 03 	jmp	0x744	; 0x744 <__vector_16>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <__vector_6+0x2c>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	10 e0       	ldi	r17, 0x00	; 0
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e6 e4       	ldi	r30, 0x46	; 70
      86:	f3 e1       	ldi	r31, 0x13	; 19
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a8 37       	cpi	r26, 0x78	; 120
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	20 e0       	ldi	r18, 0x00	; 0
      96:	a8 e7       	ldi	r26, 0x78	; 120
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a4 3c       	cpi	r26, 0xC4	; 196
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
      a8:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <main>:
	LCD_WriteString(" ");
	
	return 0;*/
//}

int main() {
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
      b4:	cd b7       	in	r28, 0x3d	; 61
      b6:	de b7       	in	r29, 0x3e	; 62
	PORT_Init();
      b8:	0e 94 3a 06 	call	0xc74	; 0xc74 <PORT_Init>
	LCD_Init();
      bc:	0e 94 67 00 	call	0xce	; 0xce <LCD_Init>
  // Sine_with_lut();
   Sine_without_lut();
      c0:	0e 94 02 06 	call	0xc04	; 0xc04 <Sine_without_lut>
	return 0;
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	90 e0       	ldi	r25, 0x00	; 0
}
      c8:	df 91       	pop	r29
      ca:	cf 91       	pop	r28
      cc:	08 95       	ret

000000ce <LCD_Init>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

void LCD_Init(void)
{
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62



#if (LCD_OPERATION_MODE  == LCD_4BIT_MODE)

	LCD_WriteCommand(0x33);
      d6:	83 e3       	ldi	r24, 0x33	; 51
      d8:	0e 94 84 00 	call	0x108	; 0x108 <LCD_WriteCommand>
	LCD_WriteCommand(0X32);
      dc:	82 e3       	ldi	r24, 0x32	; 50
      de:	0e 94 84 00 	call	0x108	; 0x108 <LCD_WriteCommand>
	LCD_WriteCommand(0X28);
      e2:	88 e2       	ldi	r24, 0x28	; 40
      e4:	0e 94 84 00 	call	0x108	; 0x108 <LCD_WriteCommand>
	LCD_WriteCommand(0x0c);
      e8:	8c e0       	ldi	r24, 0x0C	; 12
      ea:	0e 94 84 00 	call	0x108	; 0x108 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	0e 94 84 00 	call	0x108	; 0x108 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
      f4:	86 e0       	ldi	r24, 0x06	; 6
      f6:	0e 94 84 00 	call	0x108	; 0x108 <LCD_WriteCommand>
	LCD_WriteCommand(0x02);
      fa:	82 e0       	ldi	r24, 0x02	; 2
      fc:	0e 94 84 00 	call	0x108	; 0x108 <LCD_WriteCommand>
	
#endif /*end of #if (LCD_OPERATION_MODE  == 4LCD_4BIT_MODE)*/

}
     100:	00 00       	nop
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <LCD_WriteCommand>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/

void LCD_WriteCommand(uint8_t cmnd)
{
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	ab 97       	sbiw	r28, 0x2b	; 43
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	f8 94       	cli
     116:	de bf       	out	0x3e, r29	; 62
     118:	0f be       	out	0x3f, r0	; 63
     11a:	cd bf       	out	0x3d, r28	; 61
     11c:	8b a7       	std	Y+43, r24	; 0x2b

	
#if (LCD_OPERATION_MODE  == LCD_4BIT_MODE)

	DIO_WriteChennel(RS_PIN, PIN_LOW);
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>
	DIO_WriteChennel(E_PIN, PIN_LOW);
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	82 e0       	ldi	r24, 0x02	; 2
     12a:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>
	
	DIO_WriteChennel(D4_PIN, GET_BIT(cmnd,4));
     12e:	8b a5       	ldd	r24, Y+43	; 0x2b
     130:	82 95       	swap	r24
     132:	8f 70       	andi	r24, 0x0F	; 15
     134:	81 70       	andi	r24, 0x01	; 1
     136:	68 2f       	mov	r22, r24
     138:	83 e0       	ldi	r24, 0x03	; 3
     13a:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>
	DIO_WriteChennel(D5_PIN, GET_BIT(cmnd,5));
     13e:	8b a5       	ldd	r24, Y+43	; 0x2b
     140:	82 95       	swap	r24
     142:	86 95       	lsr	r24
     144:	87 70       	andi	r24, 0x07	; 7
     146:	81 70       	andi	r24, 0x01	; 1
     148:	68 2f       	mov	r22, r24
     14a:	84 e0       	ldi	r24, 0x04	; 4
     14c:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>
	DIO_WriteChennel(D6_PIN, GET_BIT(cmnd,6));
     150:	8b a5       	ldd	r24, Y+43	; 0x2b
     152:	82 95       	swap	r24
     154:	86 95       	lsr	r24
     156:	86 95       	lsr	r24
     158:	83 70       	andi	r24, 0x03	; 3
     15a:	81 70       	andi	r24, 0x01	; 1
     15c:	68 2f       	mov	r22, r24
     15e:	85 e0       	ldi	r24, 0x05	; 5
     160:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>
	DIO_WriteChennel(D7_PIN, GET_BIT(cmnd,7));
     164:	8b a5       	ldd	r24, Y+43	; 0x2b
     166:	88 1f       	adc	r24, r24
     168:	88 27       	eor	r24, r24
     16a:	88 1f       	adc	r24, r24
     16c:	68 2f       	mov	r22, r24
     16e:	86 e0       	ldi	r24, 0x06	; 6
     170:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>

  /* DIO_ReadPORTValue( PORTA_PIN3 , &ActualPortDataValue);
   NewPortDataValue = (((cmnd >> 1) & 0x78) | (ActualPortDataValue & 0x87));
   DIO_WritePORTValue(PORTA_PIN3 , NewPortDataValue);*/
	
	DIO_WriteChennel(E_PIN, PIN_HIGH);
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	82 e0       	ldi	r24, 0x02	; 2
     178:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	a0 e8       	ldi	r26, 0x80	; 128
     182:	bf e3       	ldi	r27, 0x3F	; 63
     184:	89 83       	std	Y+1, r24	; 0x01
     186:	9a 83       	std	Y+2, r25	; 0x02
     188:	ab 83       	std	Y+3, r26	; 0x03
     18a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	4a e7       	ldi	r20, 0x7A	; 122
     192:	55 e4       	ldi	r21, 0x45	; 69
     194:	69 81       	ldd	r22, Y+1	; 0x01
     196:	7a 81       	ldd	r23, Y+2	; 0x02
     198:	8b 81       	ldd	r24, Y+3	; 0x03
     19a:	9c 81       	ldd	r25, Y+4	; 0x04
     19c:	0e 94 02 08 	call	0x1004	; 0x1004 <__mulsf3>
     1a0:	dc 01       	movw	r26, r24
     1a2:	cb 01       	movw	r24, r22
     1a4:	89 a3       	std	Y+33, r24	; 0x21
     1a6:	9a a3       	std	Y+34, r25	; 0x22
     1a8:	ab a3       	std	Y+35, r26	; 0x23
     1aa:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e8       	ldi	r20, 0x80	; 128
     1b2:	5f e3       	ldi	r21, 0x3F	; 63
     1b4:	69 a1       	ldd	r22, Y+33	; 0x21
     1b6:	7a a1       	ldd	r23, Y+34	; 0x22
     1b8:	8b a1       	ldd	r24, Y+35	; 0x23
     1ba:	9c a1       	ldd	r25, Y+36	; 0x24
     1bc:	0e 94 54 07 	call	0xea8	; 0xea8 <__cmpsf2>
     1c0:	88 23       	and	r24, r24
     1c2:	2c f4       	brge	.+10     	; 0x1ce <LCD_WriteCommand+0xc6>
		__ticks = 1;
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	9e a3       	std	Y+38, r25	; 0x26
     1ca:	8d a3       	std	Y+37, r24	; 0x25
     1cc:	3f c0       	rjmp	.+126    	; 0x24c <LCD_WriteCommand+0x144>
	else if (__tmp > 65535)
     1ce:	20 e0       	ldi	r18, 0x00	; 0
     1d0:	3f ef       	ldi	r19, 0xFF	; 255
     1d2:	4f e7       	ldi	r20, 0x7F	; 127
     1d4:	57 e4       	ldi	r21, 0x47	; 71
     1d6:	69 a1       	ldd	r22, Y+33	; 0x21
     1d8:	7a a1       	ldd	r23, Y+34	; 0x22
     1da:	8b a1       	ldd	r24, Y+35	; 0x23
     1dc:	9c a1       	ldd	r25, Y+36	; 0x24
     1de:	0e 94 fd 07 	call	0xffa	; 0xffa <__gesf2>
     1e2:	18 16       	cp	r1, r24
     1e4:	4c f5       	brge	.+82     	; 0x238 <LCD_WriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	40 e2       	ldi	r20, 0x20	; 32
     1ec:	51 e4       	ldi	r21, 0x41	; 65
     1ee:	69 81       	ldd	r22, Y+1	; 0x01
     1f0:	7a 81       	ldd	r23, Y+2	; 0x02
     1f2:	8b 81       	ldd	r24, Y+3	; 0x03
     1f4:	9c 81       	ldd	r25, Y+4	; 0x04
     1f6:	0e 94 02 08 	call	0x1004	; 0x1004 <__mulsf3>
     1fa:	dc 01       	movw	r26, r24
     1fc:	cb 01       	movw	r24, r22
     1fe:	bc 01       	movw	r22, r24
     200:	cd 01       	movw	r24, r26
     202:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__fixunssfsi>
     206:	dc 01       	movw	r26, r24
     208:	cb 01       	movw	r24, r22
     20a:	9e a3       	std	Y+38, r25	; 0x26
     20c:	8d a3       	std	Y+37, r24	; 0x25
     20e:	0f c0       	rjmp	.+30     	; 0x22e <LCD_WriteCommand+0x126>
     210:	80 e9       	ldi	r24, 0x90	; 144
     212:	91 e0       	ldi	r25, 0x01	; 1
     214:	98 a7       	std	Y+40, r25	; 0x28
     216:	8f a3       	std	Y+39, r24	; 0x27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     218:	8f a1       	ldd	r24, Y+39	; 0x27
     21a:	98 a5       	ldd	r25, Y+40	; 0x28
     21c:	01 97       	sbiw	r24, 0x01	; 1
     21e:	f1 f7       	brne	.-4      	; 0x21c <LCD_WriteCommand+0x114>
     220:	98 a7       	std	Y+40, r25	; 0x28
     222:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     224:	8d a1       	ldd	r24, Y+37	; 0x25
     226:	9e a1       	ldd	r25, Y+38	; 0x26
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	9e a3       	std	Y+38, r25	; 0x26
     22c:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     22e:	8d a1       	ldd	r24, Y+37	; 0x25
     230:	9e a1       	ldd	r25, Y+38	; 0x26
     232:	89 2b       	or	r24, r25
     234:	69 f7       	brne	.-38     	; 0x210 <LCD_WriteCommand+0x108>
     236:	14 c0       	rjmp	.+40     	; 0x260 <LCD_WriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     238:	69 a1       	ldd	r22, Y+33	; 0x21
     23a:	7a a1       	ldd	r23, Y+34	; 0x22
     23c:	8b a1       	ldd	r24, Y+35	; 0x23
     23e:	9c a1       	ldd	r25, Y+36	; 0x24
     240:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__fixunssfsi>
     244:	dc 01       	movw	r26, r24
     246:	cb 01       	movw	r24, r22
     248:	9e a3       	std	Y+38, r25	; 0x26
     24a:	8d a3       	std	Y+37, r24	; 0x25
     24c:	8d a1       	ldd	r24, Y+37	; 0x25
     24e:	9e a1       	ldd	r25, Y+38	; 0x26
     250:	9a a7       	std	Y+42, r25	; 0x2a
     252:	89 a7       	std	Y+41, r24	; 0x29
     254:	89 a5       	ldd	r24, Y+41	; 0x29
     256:	9a a5       	ldd	r25, Y+42	; 0x2a
     258:	01 97       	sbiw	r24, 0x01	; 1
     25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_WriteCommand+0x150>
     25c:	9a a7       	std	Y+42, r25	; 0x2a
     25e:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1);
	DIO_WriteChennel(E_PIN, PIN_LOW);
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	82 e0       	ldi	r24, 0x02	; 2
     264:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>
	
	DIO_WriteChennel(D4_PIN, GET_BIT(cmnd,0));
     268:	8b a5       	ldd	r24, Y+43	; 0x2b
     26a:	81 70       	andi	r24, 0x01	; 1
     26c:	68 2f       	mov	r22, r24
     26e:	83 e0       	ldi	r24, 0x03	; 3
     270:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>
	DIO_WriteChennel(D5_PIN, GET_BIT(cmnd,1));
     274:	8b a5       	ldd	r24, Y+43	; 0x2b
     276:	86 95       	lsr	r24
     278:	81 70       	andi	r24, 0x01	; 1
     27a:	68 2f       	mov	r22, r24
     27c:	84 e0       	ldi	r24, 0x04	; 4
     27e:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>
	DIO_WriteChennel(D6_PIN, GET_BIT(cmnd,2));
     282:	8b a5       	ldd	r24, Y+43	; 0x2b
     284:	86 95       	lsr	r24
     286:	86 95       	lsr	r24
     288:	81 70       	andi	r24, 0x01	; 1
     28a:	68 2f       	mov	r22, r24
     28c:	85 e0       	ldi	r24, 0x05	; 5
     28e:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>
	DIO_WriteChennel(D7_PIN, GET_BIT(cmnd,3));
     292:	8b a5       	ldd	r24, Y+43	; 0x2b
     294:	86 95       	lsr	r24
     296:	86 95       	lsr	r24
     298:	86 95       	lsr	r24
     29a:	81 70       	andi	r24, 0x01	; 1
     29c:	68 2f       	mov	r22, r24
     29e:	86 e0       	ldi	r24, 0x06	; 6
     2a0:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>
 	/*DIO_ReadPORTValue( PORTA_PIN3 , &ActualPortDataValue);
 	NewPortDataValue = (((cmnd << 3) & 0x78) | (ActualPortDataValue & 0x87));
 	DIO_WritePORTValue(PORTA_PIN3 , NewPortDataValue);*/
	
	DIO_WriteChennel(E_PIN, PIN_HIGH);
     2a4:	61 e0       	ldi	r22, 0x01	; 1
     2a6:	82 e0       	ldi	r24, 0x02	; 2
     2a8:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	a0 e8       	ldi	r26, 0x80	; 128
     2b2:	bf e3       	ldi	r27, 0x3F	; 63
     2b4:	8d 83       	std	Y+5, r24	; 0x05
     2b6:	9e 83       	std	Y+6, r25	; 0x06
     2b8:	af 83       	std	Y+7, r26	; 0x07
     2ba:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	4a e7       	ldi	r20, 0x7A	; 122
     2c2:	55 e4       	ldi	r21, 0x45	; 69
     2c4:	6d 81       	ldd	r22, Y+5	; 0x05
     2c6:	7e 81       	ldd	r23, Y+6	; 0x06
     2c8:	8f 81       	ldd	r24, Y+7	; 0x07
     2ca:	98 85       	ldd	r25, Y+8	; 0x08
     2cc:	0e 94 02 08 	call	0x1004	; 0x1004 <__mulsf3>
     2d0:	dc 01       	movw	r26, r24
     2d2:	cb 01       	movw	r24, r22
     2d4:	8f 8b       	std	Y+23, r24	; 0x17
     2d6:	98 8f       	std	Y+24, r25	; 0x18
     2d8:	a9 8f       	std	Y+25, r26	; 0x19
     2da:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	40 e8       	ldi	r20, 0x80	; 128
     2e2:	5f e3       	ldi	r21, 0x3F	; 63
     2e4:	6f 89       	ldd	r22, Y+23	; 0x17
     2e6:	78 8d       	ldd	r23, Y+24	; 0x18
     2e8:	89 8d       	ldd	r24, Y+25	; 0x19
     2ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2ec:	0e 94 54 07 	call	0xea8	; 0xea8 <__cmpsf2>
     2f0:	88 23       	and	r24, r24
     2f2:	2c f4       	brge	.+10     	; 0x2fe <LCD_WriteCommand+0x1f6>
		__ticks = 1;
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	9c 8f       	std	Y+28, r25	; 0x1c
     2fa:	8b 8f       	std	Y+27, r24	; 0x1b
     2fc:	3f c0       	rjmp	.+126    	; 0x37c <LCD_WriteCommand+0x274>
	else if (__tmp > 65535)
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	3f ef       	ldi	r19, 0xFF	; 255
     302:	4f e7       	ldi	r20, 0x7F	; 127
     304:	57 e4       	ldi	r21, 0x47	; 71
     306:	6f 89       	ldd	r22, Y+23	; 0x17
     308:	78 8d       	ldd	r23, Y+24	; 0x18
     30a:	89 8d       	ldd	r24, Y+25	; 0x19
     30c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     30e:	0e 94 fd 07 	call	0xffa	; 0xffa <__gesf2>
     312:	18 16       	cp	r1, r24
     314:	4c f5       	brge	.+82     	; 0x368 <LCD_WriteCommand+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	40 e2       	ldi	r20, 0x20	; 32
     31c:	51 e4       	ldi	r21, 0x41	; 65
     31e:	6d 81       	ldd	r22, Y+5	; 0x05
     320:	7e 81       	ldd	r23, Y+6	; 0x06
     322:	8f 81       	ldd	r24, Y+7	; 0x07
     324:	98 85       	ldd	r25, Y+8	; 0x08
     326:	0e 94 02 08 	call	0x1004	; 0x1004 <__mulsf3>
     32a:	dc 01       	movw	r26, r24
     32c:	cb 01       	movw	r24, r22
     32e:	bc 01       	movw	r22, r24
     330:	cd 01       	movw	r24, r26
     332:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__fixunssfsi>
     336:	dc 01       	movw	r26, r24
     338:	cb 01       	movw	r24, r22
     33a:	9c 8f       	std	Y+28, r25	; 0x1c
     33c:	8b 8f       	std	Y+27, r24	; 0x1b
     33e:	0f c0       	rjmp	.+30     	; 0x35e <LCD_WriteCommand+0x256>
     340:	80 e9       	ldi	r24, 0x90	; 144
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	9e 8f       	std	Y+30, r25	; 0x1e
     346:	8d 8f       	std	Y+29, r24	; 0x1d
     348:	8d 8d       	ldd	r24, Y+29	; 0x1d
     34a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <LCD_WriteCommand+0x244>
     350:	9e 8f       	std	Y+30, r25	; 0x1e
     352:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     354:	8b 8d       	ldd	r24, Y+27	; 0x1b
     356:	9c 8d       	ldd	r25, Y+28	; 0x1c
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	9c 8f       	std	Y+28, r25	; 0x1c
     35c:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     35e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     360:	9c 8d       	ldd	r25, Y+28	; 0x1c
     362:	89 2b       	or	r24, r25
     364:	69 f7       	brne	.-38     	; 0x340 <LCD_WriteCommand+0x238>
     366:	14 c0       	rjmp	.+40     	; 0x390 <LCD_WriteCommand+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     368:	6f 89       	ldd	r22, Y+23	; 0x17
     36a:	78 8d       	ldd	r23, Y+24	; 0x18
     36c:	89 8d       	ldd	r24, Y+25	; 0x19
     36e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     370:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__fixunssfsi>
     374:	dc 01       	movw	r26, r24
     376:	cb 01       	movw	r24, r22
     378:	9c 8f       	std	Y+28, r25	; 0x1c
     37a:	8b 8f       	std	Y+27, r24	; 0x1b
     37c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     37e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     380:	98 a3       	std	Y+32, r25	; 0x20
     382:	8f 8f       	std	Y+31, r24	; 0x1f
     384:	8f 8d       	ldd	r24, Y+31	; 0x1f
     386:	98 a1       	ldd	r25, Y+32	; 0x20
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	f1 f7       	brne	.-4      	; 0x388 <LCD_WriteCommand+0x280>
     38c:	98 a3       	std	Y+32, r25	; 0x20
     38e:	8f 8f       	std	Y+31, r24	; 0x1f
	_delay_ms(1);
	DIO_WriteChennel(E_PIN, PIN_LOW);
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	82 e0       	ldi	r24, 0x02	; 2
     394:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	a0 ea       	ldi	r26, 0xA0	; 160
     39e:	b0 e4       	ldi	r27, 0x40	; 64
     3a0:	89 87       	std	Y+9, r24	; 0x09
     3a2:	9a 87       	std	Y+10, r25	; 0x0a
     3a4:	ab 87       	std	Y+11, r26	; 0x0b
     3a6:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	4a e7       	ldi	r20, 0x7A	; 122
     3ae:	55 e4       	ldi	r21, 0x45	; 69
     3b0:	69 85       	ldd	r22, Y+9	; 0x09
     3b2:	7a 85       	ldd	r23, Y+10	; 0x0a
     3b4:	8b 85       	ldd	r24, Y+11	; 0x0b
     3b6:	9c 85       	ldd	r25, Y+12	; 0x0c
     3b8:	0e 94 02 08 	call	0x1004	; 0x1004 <__mulsf3>
     3bc:	dc 01       	movw	r26, r24
     3be:	cb 01       	movw	r24, r22
     3c0:	8d 87       	std	Y+13, r24	; 0x0d
     3c2:	9e 87       	std	Y+14, r25	; 0x0e
     3c4:	af 87       	std	Y+15, r26	; 0x0f
     3c6:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	40 e8       	ldi	r20, 0x80	; 128
     3ce:	5f e3       	ldi	r21, 0x3F	; 63
     3d0:	6d 85       	ldd	r22, Y+13	; 0x0d
     3d2:	7e 85       	ldd	r23, Y+14	; 0x0e
     3d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     3d6:	98 89       	ldd	r25, Y+16	; 0x10
     3d8:	0e 94 54 07 	call	0xea8	; 0xea8 <__cmpsf2>
     3dc:	88 23       	and	r24, r24
     3de:	2c f4       	brge	.+10     	; 0x3ea <LCD_WriteCommand+0x2e2>
		__ticks = 1;
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	9a 8b       	std	Y+18, r25	; 0x12
     3e6:	89 8b       	std	Y+17, r24	; 0x11
     3e8:	3f c0       	rjmp	.+126    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
	else if (__tmp > 65535)
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	3f ef       	ldi	r19, 0xFF	; 255
     3ee:	4f e7       	ldi	r20, 0x7F	; 127
     3f0:	57 e4       	ldi	r21, 0x47	; 71
     3f2:	6d 85       	ldd	r22, Y+13	; 0x0d
     3f4:	7e 85       	ldd	r23, Y+14	; 0x0e
     3f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     3f8:	98 89       	ldd	r25, Y+16	; 0x10
     3fa:	0e 94 fd 07 	call	0xffa	; 0xffa <__gesf2>
     3fe:	18 16       	cp	r1, r24
     400:	4c f5       	brge	.+82     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e2       	ldi	r20, 0x20	; 32
     408:	51 e4       	ldi	r21, 0x41	; 65
     40a:	69 85       	ldd	r22, Y+9	; 0x09
     40c:	7a 85       	ldd	r23, Y+10	; 0x0a
     40e:	8b 85       	ldd	r24, Y+11	; 0x0b
     410:	9c 85       	ldd	r25, Y+12	; 0x0c
     412:	0e 94 02 08 	call	0x1004	; 0x1004 <__mulsf3>
     416:	dc 01       	movw	r26, r24
     418:	cb 01       	movw	r24, r22
     41a:	bc 01       	movw	r22, r24
     41c:	cd 01       	movw	r24, r26
     41e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__fixunssfsi>
     422:	dc 01       	movw	r26, r24
     424:	cb 01       	movw	r24, r22
     426:	9a 8b       	std	Y+18, r25	; 0x12
     428:	89 8b       	std	Y+17, r24	; 0x11
     42a:	0f c0       	rjmp	.+30     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     42c:	80 e9       	ldi	r24, 0x90	; 144
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	9c 8b       	std	Y+20, r25	; 0x14
     432:	8b 8b       	std	Y+19, r24	; 0x13
     434:	8b 89       	ldd	r24, Y+19	; 0x13
     436:	9c 89       	ldd	r25, Y+20	; 0x14
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     43c:	9c 8b       	std	Y+20, r25	; 0x14
     43e:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     440:	89 89       	ldd	r24, Y+17	; 0x11
     442:	9a 89       	ldd	r25, Y+18	; 0x12
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	9a 8b       	std	Y+18, r25	; 0x12
     448:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     44a:	89 89       	ldd	r24, Y+17	; 0x11
     44c:	9a 89       	ldd	r25, Y+18	; 0x12
     44e:	89 2b       	or	r24, r25
     450:	69 f7       	brne	.-38     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	_delay_ms(5);
	
#endif /*end of #if (LCD_OPERATION_MODE  == 4LCD_4BIT_MODE)*/


}
     452:	14 c0       	rjmp	.+40     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     454:	6d 85       	ldd	r22, Y+13	; 0x0d
     456:	7e 85       	ldd	r23, Y+14	; 0x0e
     458:	8f 85       	ldd	r24, Y+15	; 0x0f
     45a:	98 89       	ldd	r25, Y+16	; 0x10
     45c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__fixunssfsi>
     460:	dc 01       	movw	r26, r24
     462:	cb 01       	movw	r24, r22
     464:	9a 8b       	std	Y+18, r25	; 0x12
     466:	89 8b       	std	Y+17, r24	; 0x11
     468:	89 89       	ldd	r24, Y+17	; 0x11
     46a:	9a 89       	ldd	r25, Y+18	; 0x12
     46c:	9e 8b       	std	Y+22, r25	; 0x16
     46e:	8d 8b       	std	Y+21, r24	; 0x15
     470:	8d 89       	ldd	r24, Y+21	; 0x15
     472:	9e 89       	ldd	r25, Y+22	; 0x16
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     478:	9e 8b       	std	Y+22, r25	; 0x16
     47a:	8d 8b       	std	Y+21, r24	; 0x15
     47c:	00 00       	nop
     47e:	ab 96       	adiw	r28, 0x2b	; 43
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	f8 94       	cli
     484:	de bf       	out	0x3e, r29	; 62
     486:	0f be       	out	0x3f, r0	; 63
     488:	cd bf       	out	0x3d, r28	; 61
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <DIO_WriteChennel>:
* \Parameters (out): None                                                      
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void DIO_WriteChennel(uint8_t Pin_Num , PIN_VALUE_t Pin_value )
{
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	00 d0       	rcall	.+0      	; 0x496 <DIO_WriteChennel+0x6>
     496:	00 d0       	rcall	.+0      	; 0x498 <DIO_WriteChennel+0x8>
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	8b 83       	std	Y+3, r24	; 0x03
     49e:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t Port = 0 , Pin = 0;
     4a0:	19 82       	std	Y+1, r1	; 0x01
     4a2:	1a 82       	std	Y+2, r1	; 0x02
	
	Port = Pin_Num / NUMBER_OF_EACH_PORT_PINS ;
     4a4:	8b 81       	ldd	r24, Y+3	; 0x03
     4a6:	86 95       	lsr	r24
     4a8:	86 95       	lsr	r24
     4aa:	86 95       	lsr	r24
     4ac:	89 83       	std	Y+1, r24	; 0x01
	Pin  = Pin_Num % NUMBER_OF_EACH_PORT_PINS ;
     4ae:	8b 81       	ldd	r24, Y+3	; 0x03
     4b0:	87 70       	andi	r24, 0x07	; 7
     4b2:	8a 83       	std	Y+2, r24	; 0x02
	
	switch(Pin_value)
     4b4:	8c 81       	ldd	r24, Y+4	; 0x04
     4b6:	88 2f       	mov	r24, r24
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	00 97       	sbiw	r24, 0x00	; 0
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <DIO_WriteChennel+0x30>
     4be:	6b c0       	rjmp	.+214    	; 0x596 <DIO_WriteChennel+0x106>
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <DIO_WriteChennel+0x36>
			break;
		}
		break;
		
		default:
		break;
     4c4:	d4 c0       	rjmp	.+424    	; 0x66e <DIO_WriteChennel+0x1de>
	
	switch(Pin_value)
	{
		case PIN_HIGH :
		
		switch(Port)
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	88 2f       	mov	r24, r24
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	81 30       	cpi	r24, 0x01	; 1
     4ce:	91 05       	cpc	r25, r1
     4d0:	11 f1       	breq	.+68     	; 0x516 <DIO_WriteChennel+0x86>
     4d2:	82 30       	cpi	r24, 0x02	; 2
     4d4:	91 05       	cpc	r25, r1
     4d6:	1c f4       	brge	.+6      	; 0x4de <DIO_WriteChennel+0x4e>
     4d8:	89 2b       	or	r24, r25
     4da:	41 f0       	breq	.+16     	; 0x4ec <DIO_WriteChennel+0x5c>
		case 3:
		SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
		break;
		
		default:
		break;
     4dc:	5b c0       	rjmp	.+182    	; 0x594 <DIO_WriteChennel+0x104>
	
	switch(Pin_value)
	{
		case PIN_HIGH :
		
		switch(Port)
     4de:	82 30       	cpi	r24, 0x02	; 2
     4e0:	91 05       	cpc	r25, r1
     4e2:	71 f1       	breq	.+92     	; 0x540 <DIO_WriteChennel+0xb0>
     4e4:	03 97       	sbiw	r24, 0x03	; 3
     4e6:	09 f4       	brne	.+2      	; 0x4ea <DIO_WriteChennel+0x5a>
     4e8:	40 c0       	rjmp	.+128    	; 0x56a <DIO_WriteChennel+0xda>
		case 3:
		SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
		break;
		
		default:
		break;
     4ea:	54 c0       	rjmp	.+168    	; 0x594 <DIO_WriteChennel+0x104>
		case PIN_HIGH :
		
		switch(Port)
		{
		case 0:
		SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
     4ec:	8b e3       	ldi	r24, 0x3B	; 59
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	2b e3       	ldi	r18, 0x3B	; 59
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	f9 01       	movw	r30, r18
     4f6:	20 81       	ld	r18, Z
     4f8:	62 2f       	mov	r22, r18
     4fa:	2a 81       	ldd	r18, Y+2	; 0x02
     4fc:	42 2f       	mov	r20, r18
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	21 e0       	ldi	r18, 0x01	; 1
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_WriteChennel+0x7a>
     506:	22 0f       	add	r18, r18
     508:	33 1f       	adc	r19, r19
     50a:	4a 95       	dec	r20
     50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_WriteChennel+0x76>
     50e:	26 2b       	or	r18, r22
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
		break;
     514:	3f c0       	rjmp	.+126    	; 0x594 <DIO_WriteChennel+0x104>
		
		case 1:
		SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
     516:	88 e3       	ldi	r24, 0x38	; 56
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	28 e3       	ldi	r18, 0x38	; 56
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	f9 01       	movw	r30, r18
     520:	20 81       	ld	r18, Z
     522:	62 2f       	mov	r22, r18
     524:	2a 81       	ldd	r18, Y+2	; 0x02
     526:	42 2f       	mov	r20, r18
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	21 e0       	ldi	r18, 0x01	; 1
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_WriteChennel+0xa4>
     530:	22 0f       	add	r18, r18
     532:	33 1f       	adc	r19, r19
     534:	4a 95       	dec	r20
     536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_WriteChennel+0xa0>
     538:	26 2b       	or	r18, r22
     53a:	fc 01       	movw	r30, r24
     53c:	20 83       	st	Z, r18
		break;
     53e:	2a c0       	rjmp	.+84     	; 0x594 <DIO_WriteChennel+0x104>
		
		case 2:
		SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
     540:	85 e3       	ldi	r24, 0x35	; 53
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	25 e3       	ldi	r18, 0x35	; 53
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	f9 01       	movw	r30, r18
     54a:	20 81       	ld	r18, Z
     54c:	62 2f       	mov	r22, r18
     54e:	2a 81       	ldd	r18, Y+2	; 0x02
     550:	42 2f       	mov	r20, r18
     552:	50 e0       	ldi	r21, 0x00	; 0
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_WriteChennel+0xce>
     55a:	22 0f       	add	r18, r18
     55c:	33 1f       	adc	r19, r19
     55e:	4a 95       	dec	r20
     560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_WriteChennel+0xca>
     562:	26 2b       	or	r18, r22
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
		break;
     568:	15 c0       	rjmp	.+42     	; 0x594 <DIO_WriteChennel+0x104>
		
		case 3:
		SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
     56a:	82 e3       	ldi	r24, 0x32	; 50
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	22 e3       	ldi	r18, 0x32	; 50
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	f9 01       	movw	r30, r18
     574:	20 81       	ld	r18, Z
     576:	62 2f       	mov	r22, r18
     578:	2a 81       	ldd	r18, Y+2	; 0x02
     57a:	42 2f       	mov	r20, r18
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	21 e0       	ldi	r18, 0x01	; 1
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_WriteChennel+0xf8>
     584:	22 0f       	add	r18, r18
     586:	33 1f       	adc	r19, r19
     588:	4a 95       	dec	r20
     58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_WriteChennel+0xf4>
     58c:	26 2b       	or	r18, r22
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
		break;
     592:	00 00       	nop
		
		default:
		break;
		}
		break;
     594:	6c c0       	rjmp	.+216    	; 0x66e <DIO_WriteChennel+0x1de>
		
		case PIN_LOW :
				
		switch(Port)
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	88 2f       	mov	r24, r24
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	91 05       	cpc	r25, r1
     5a0:	19 f1       	breq	.+70     	; 0x5e8 <DIO_WriteChennel+0x158>
     5a2:	82 30       	cpi	r24, 0x02	; 2
     5a4:	91 05       	cpc	r25, r1
     5a6:	1c f4       	brge	.+6      	; 0x5ae <DIO_WriteChennel+0x11e>
     5a8:	89 2b       	or	r24, r25
     5aa:	41 f0       	breq	.+16     	; 0x5bc <DIO_WriteChennel+0x12c>
			case 3:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
			break;
			
			default:
			break;
     5ac:	5f c0       	rjmp	.+190    	; 0x66c <DIO_WriteChennel+0x1dc>
		}
		break;
		
		case PIN_LOW :
				
		switch(Port)
     5ae:	82 30       	cpi	r24, 0x02	; 2
     5b0:	91 05       	cpc	r25, r1
     5b2:	81 f1       	breq	.+96     	; 0x614 <DIO_WriteChennel+0x184>
     5b4:	03 97       	sbiw	r24, 0x03	; 3
     5b6:	09 f4       	brne	.+2      	; 0x5ba <DIO_WriteChennel+0x12a>
     5b8:	43 c0       	rjmp	.+134    	; 0x640 <DIO_WriteChennel+0x1b0>
			case 3:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
			break;
			
			default:
			break;
     5ba:	58 c0       	rjmp	.+176    	; 0x66c <DIO_WriteChennel+0x1dc>
		case PIN_LOW :
				
		switch(Port)
		{
			case 0:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
     5bc:	8b e3       	ldi	r24, 0x3B	; 59
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	2b e3       	ldi	r18, 0x3B	; 59
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	f9 01       	movw	r30, r18
     5c6:	20 81       	ld	r18, Z
     5c8:	62 2f       	mov	r22, r18
     5ca:	2a 81       	ldd	r18, Y+2	; 0x02
     5cc:	42 2f       	mov	r20, r18
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	21 e0       	ldi	r18, 0x01	; 1
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_WriteChennel+0x14a>
     5d6:	22 0f       	add	r18, r18
     5d8:	33 1f       	adc	r19, r19
     5da:	4a 95       	dec	r20
     5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_WriteChennel+0x146>
     5de:	20 95       	com	r18
     5e0:	26 23       	and	r18, r22
     5e2:	fc 01       	movw	r30, r24
     5e4:	20 83       	st	Z, r18
			break;
     5e6:	42 c0       	rjmp	.+132    	; 0x66c <DIO_WriteChennel+0x1dc>
			
			case 1:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
     5e8:	88 e3       	ldi	r24, 0x38	; 56
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	28 e3       	ldi	r18, 0x38	; 56
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	f9 01       	movw	r30, r18
     5f2:	20 81       	ld	r18, Z
     5f4:	62 2f       	mov	r22, r18
     5f6:	2a 81       	ldd	r18, Y+2	; 0x02
     5f8:	42 2f       	mov	r20, r18
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_WriteChennel+0x176>
     602:	22 0f       	add	r18, r18
     604:	33 1f       	adc	r19, r19
     606:	4a 95       	dec	r20
     608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_WriteChennel+0x172>
     60a:	20 95       	com	r18
     60c:	26 23       	and	r18, r22
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18
			break;
     612:	2c c0       	rjmp	.+88     	; 0x66c <DIO_WriteChennel+0x1dc>
			
			case 2:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
     614:	85 e3       	ldi	r24, 0x35	; 53
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	25 e3       	ldi	r18, 0x35	; 53
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	f9 01       	movw	r30, r18
     61e:	20 81       	ld	r18, Z
     620:	62 2f       	mov	r22, r18
     622:	2a 81       	ldd	r18, Y+2	; 0x02
     624:	42 2f       	mov	r20, r18
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	21 e0       	ldi	r18, 0x01	; 1
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_WriteChennel+0x1a2>
     62e:	22 0f       	add	r18, r18
     630:	33 1f       	adc	r19, r19
     632:	4a 95       	dec	r20
     634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_WriteChennel+0x19e>
     636:	20 95       	com	r18
     638:	26 23       	and	r18, r22
     63a:	fc 01       	movw	r30, r24
     63c:	20 83       	st	Z, r18
			break;
     63e:	16 c0       	rjmp	.+44     	; 0x66c <DIO_WriteChennel+0x1dc>
			
			case 3:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
     640:	82 e3       	ldi	r24, 0x32	; 50
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	22 e3       	ldi	r18, 0x32	; 50
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	f9 01       	movw	r30, r18
     64a:	20 81       	ld	r18, Z
     64c:	62 2f       	mov	r22, r18
     64e:	2a 81       	ldd	r18, Y+2	; 0x02
     650:	42 2f       	mov	r20, r18
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	21 e0       	ldi	r18, 0x01	; 1
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_WriteChennel+0x1ce>
     65a:	22 0f       	add	r18, r18
     65c:	33 1f       	adc	r19, r19
     65e:	4a 95       	dec	r20
     660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_WriteChennel+0x1ca>
     662:	20 95       	com	r18
     664:	26 23       	and	r18, r22
     666:	fc 01       	movw	r30, r24
     668:	20 83       	st	Z, r18
			break;
     66a:	00 00       	nop
			
			default:
			break;
		}
		break;
     66c:	00 00       	nop
		
		default:
		break;
	}
}
     66e:	00 00       	nop
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <GPT_Init>:
* \Parameters (out): None                                                      
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void GPT_Init(void)
{
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
		#if(Timer0_State == TIMER_ENABLE)
		/** Timer0 Operation Mode **/
		   #if (TIMER0_MODE == NORMAL_MODE)
	         CLR_BIT(TCCR0 , 3);
     686:	83 e5       	ldi	r24, 0x53	; 83
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	23 e5       	ldi	r18, 0x53	; 83
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	f9 01       	movw	r30, r18
     690:	20 81       	ld	r18, Z
     692:	27 7f       	andi	r18, 0xF7	; 247
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18
	         CLR_BIT(TCCR0 , 6);
     698:	83 e5       	ldi	r24, 0x53	; 83
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	23 e5       	ldi	r18, 0x53	; 83
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	f9 01       	movw	r30, r18
     6a2:	20 81       	ld	r18, Z
     6a4:	2f 7b       	andi	r18, 0xBF	; 191
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 83       	st	Z, r18
			  #if (TIMER0_INTERRUPT_STATE == INTERRUPT_ENABLED)
			   SET_BIT(TIMSK,0);
     6aa:	89 e5       	ldi	r24, 0x59	; 89
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	29 e5       	ldi	r18, 0x59	; 89
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	f9 01       	movw	r30, r18
     6b4:	20 81       	ld	r18, Z
     6b6:	21 60       	ori	r18, 0x01	; 1
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 83       	st	Z, r18
		   #elif (TIMER0_PRESCALER == CLK_SRC_PRESCALING_64		 )
		    TCCR0 |= 0X03;
		   #elif (TIMER0_PRESCALER == CLK_SRC_PRESCALING_256		 )
		    TCCR0 |= 0X04;
		   #elif (TIMER0_PRESCALER == CLK_SRC_PRESCALING_1024		 )
		    TCCR0 |= 0X05;
     6bc:	83 e5       	ldi	r24, 0x53	; 83
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	23 e5       	ldi	r18, 0x53	; 83
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	f9 01       	movw	r30, r18
     6c6:	20 81       	ld	r18, Z
     6c8:	25 60       	ori	r18, 0x05	; 5
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18
		TCCR1B |= 0X04;
		#elif (TIMER1_PRESCALER == CLK_SRC_PRESCALING_1024	 )
		TCCR1B |= 0X05;
		#endif /*end #if(TIMER1_PRESCALER == CLK_SRC_WITH_NO_PRESCALING) */
		#endif /*if (Timer1_State == TIMER_ENABLE)*/
}
     6ce:	00 00       	nop
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <__vector_1>:
}



ISR(INT0_vect)
{
     6d6:	1f 92       	push	r1
     6d8:	0f 92       	push	r0
     6da:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     6de:	0f 92       	push	r0
     6e0:	11 24       	eor	r1, r1
     6e2:	2f 93       	push	r18
     6e4:	3f 93       	push	r19
     6e6:	4f 93       	push	r20
     6e8:	5f 93       	push	r21
     6ea:	6f 93       	push	r22
     6ec:	7f 93       	push	r23
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	af 93       	push	r26
     6f4:	bf 93       	push	r27
     6f6:	ef 93       	push	r30
     6f8:	ff 93       	push	r31
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
	
	if(CallBack_PtrFunc[External_Interrupt_Request_0_VECTOR_INDEX] != Null)
     702:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <CallBack_PtrFunc>
     706:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <CallBack_PtrFunc+0x1>
     70a:	89 2b       	or	r24, r25
     70c:	31 f0       	breq	.+12     	; 0x71a <__vector_1+0x44>
	{
		(*CallBack_PtrFunc[External_Interrupt_Request_0_VECTOR_INDEX])();
     70e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <CallBack_PtrFunc>
     712:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <CallBack_PtrFunc+0x1>
     716:	fc 01       	movw	r30, r24
     718:	09 95       	icall
	}
}
     71a:	00 00       	nop
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	ff 91       	pop	r31
     722:	ef 91       	pop	r30
     724:	bf 91       	pop	r27
     726:	af 91       	pop	r26
     728:	9f 91       	pop	r25
     72a:	8f 91       	pop	r24
     72c:	7f 91       	pop	r23
     72e:	6f 91       	pop	r22
     730:	5f 91       	pop	r21
     732:	4f 91       	pop	r20
     734:	3f 91       	pop	r19
     736:	2f 91       	pop	r18
     738:	0f 90       	pop	r0
     73a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     73e:	0f 90       	pop	r0
     740:	1f 90       	pop	r1
     742:	18 95       	reti

00000744 <__vector_16>:

ISR(ADC_vect)
{
     744:	1f 92       	push	r1
     746:	0f 92       	push	r0
     748:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	2f 93       	push	r18
     752:	3f 93       	push	r19
     754:	4f 93       	push	r20
     756:	5f 93       	push	r21
     758:	6f 93       	push	r22
     75a:	7f 93       	push	r23
     75c:	8f 93       	push	r24
     75e:	9f 93       	push	r25
     760:	af 93       	push	r26
     762:	bf 93       	push	r27
     764:	ef 93       	push	r30
     766:	ff 93       	push	r31
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	00 d0       	rcall	.+0      	; 0x76e <__vector_16+0x2a>
     76e:	00 d0       	rcall	.+0      	; 0x770 <__vector_16+0x2c>
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
	
	if(CallBack_PtrFunc[ADC_Conversion_Complete_VECTOR_INDEX] != Null)
     774:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <CallBack_PtrFunc+0x1e>
     778:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <CallBack_PtrFunc+0x1f>
     77c:	89 2b       	or	r24, r25
     77e:	79 f1       	breq	.+94     	; 0x7de <__vector_16+0x9a>
	{
		uint32_t ADC_Digital_Value = ADC_INPUT_16BIT_ACCESS;
     780:	84 e2       	ldi	r24, 0x24	; 36
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	fc 01       	movw	r30, r24
     786:	80 81       	ld	r24, Z
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	cc 01       	movw	r24, r24
     78c:	a0 e0       	ldi	r26, 0x00	; 0
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	89 83       	std	Y+1, r24	; 0x01
     792:	9a 83       	std	Y+2, r25	; 0x02
     794:	ab 83       	std	Y+3, r26	; 0x03
     796:	bc 83       	std	Y+4, r27	; 0x04
		ADC_Vin_Value_mv = (ADC_Digital_Value * 5000) / 1023;
     798:	29 81       	ldd	r18, Y+1	; 0x01
     79a:	3a 81       	ldd	r19, Y+2	; 0x02
     79c:	4b 81       	ldd	r20, Y+3	; 0x03
     79e:	5c 81       	ldd	r21, Y+4	; 0x04
     7a0:	88 e8       	ldi	r24, 0x88	; 136
     7a2:	93 e1       	ldi	r25, 0x13	; 19
     7a4:	dc 01       	movw	r26, r24
     7a6:	0e 94 87 09 	call	0x130e	; 0x130e <__muluhisi3>
     7aa:	dc 01       	movw	r26, r24
     7ac:	cb 01       	movw	r24, r22
     7ae:	2f ef       	ldi	r18, 0xFF	; 255
     7b0:	33 e0       	ldi	r19, 0x03	; 3
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	bc 01       	movw	r22, r24
     7b8:	cd 01       	movw	r24, r26
     7ba:	0e 94 65 09 	call	0x12ca	; 0x12ca <__udivmodsi4>
     7be:	da 01       	movw	r26, r20
     7c0:	c9 01       	movw	r24, r18
     7c2:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
     7c6:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
     7ca:	a0 93 7a 00 	sts	0x007A, r26	; 0x80007a <__data_end+0x2>
     7ce:	b0 93 7b 00 	sts	0x007B, r27	; 0x80007b <__data_end+0x3>
		(*CallBack_PtrFunc[ADC_Conversion_Complete_VECTOR_INDEX])();
     7d2:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <CallBack_PtrFunc+0x1e>
     7d6:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <CallBack_PtrFunc+0x1f>
     7da:	fc 01       	movw	r30, r24
     7dc:	09 95       	icall
	}
}
     7de:	00 00       	nop
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	ff 91       	pop	r31
     7ee:	ef 91       	pop	r30
     7f0:	bf 91       	pop	r27
     7f2:	af 91       	pop	r26
     7f4:	9f 91       	pop	r25
     7f6:	8f 91       	pop	r24
     7f8:	7f 91       	pop	r23
     7fa:	6f 91       	pop	r22
     7fc:	5f 91       	pop	r21
     7fe:	4f 91       	pop	r20
     800:	3f 91       	pop	r19
     802:	2f 91       	pop	r18
     804:	0f 90       	pop	r0
     806:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     818:	0f 92       	push	r0
     81a:	11 24       	eor	r1, r1
     81c:	2f 93       	push	r18
     81e:	3f 93       	push	r19
     820:	4f 93       	push	r20
     822:	5f 93       	push	r21
     824:	6f 93       	push	r22
     826:	7f 93       	push	r23
     828:	8f 93       	push	r24
     82a:	9f 93       	push	r25
     82c:	af 93       	push	r26
     82e:	bf 93       	push	r27
     830:	ef 93       	push	r30
     832:	ff 93       	push	r31
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
	static uint8_t INT_CNT_l = 0;
	
	INT_CNT_l++;
     83c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <INT_CNT_l.1668>
     840:	8f 5f       	subi	r24, 0xFF	; 255
     842:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <INT_CNT_l.1668>
	
	if(INT_CNT_l == TIMER0_Number_OVRflows_g)
     846:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <INT_CNT_l.1668>
     84a:	28 2f       	mov	r18, r24
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <TIMER0_Number_OVRflows_g>
     856:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <TIMER0_Number_OVRflows_g+0x1>
     85a:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <TIMER0_Number_OVRflows_g+0x2>
     85e:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <TIMER0_Number_OVRflows_g+0x3>
     862:	28 17       	cp	r18, r24
     864:	39 07       	cpc	r19, r25
     866:	4a 07       	cpc	r20, r26
     868:	5b 07       	cpc	r21, r27
     86a:	a1 f4       	brne	.+40     	; 0x894 <__stack+0x35>
	{
		(*CallBack_PtrFunc[Timer_Counter0_Overflow_VECTOR_INDEX])();
     86c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <CallBack_PtrFunc+0x14>
     870:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <CallBack_PtrFunc+0x15>
     874:	fc 01       	movw	r30, r24
     876:	09 95       	icall
		INT_CNT_l = 0;
     878:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <INT_CNT_l.1668>
		TCNT0 = TIMER0_Init_Value_g ;
     87c:	22 e5       	ldi	r18, 0x52	; 82
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <TIMER0_Init_Value_g>
     884:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <TIMER0_Init_Value_g+0x1>
     888:	a0 91 82 00 	lds	r26, 0x0082	; 0x800082 <TIMER0_Init_Value_g+0x2>
     88c:	b0 91 83 00 	lds	r27, 0x0083	; 0x800083 <TIMER0_Init_Value_g+0x3>
     890:	f9 01       	movw	r30, r18
     892:	80 83       	st	Z, r24
	}
}
     894:	00 00       	nop
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	ff 91       	pop	r31
     89c:	ef 91       	pop	r30
     89e:	bf 91       	pop	r27
     8a0:	af 91       	pop	r26
     8a2:	9f 91       	pop	r25
     8a4:	8f 91       	pop	r24
     8a6:	7f 91       	pop	r23
     8a8:	6f 91       	pop	r22
     8aa:	5f 91       	pop	r21
     8ac:	4f 91       	pop	r20
     8ae:	3f 91       	pop	r19
     8b0:	2f 91       	pop	r18
     8b2:	0f 90       	pop	r0
     8b4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     8b8:	0f 90       	pop	r0
     8ba:	1f 90       	pop	r1
     8bc:	18 95       	reti

000008be <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     8be:	1f 92       	push	r1
     8c0:	0f 92       	push	r0
     8c2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
     8ca:	2f 93       	push	r18
     8cc:	3f 93       	push	r19
     8ce:	4f 93       	push	r20
     8d0:	5f 93       	push	r21
     8d2:	6f 93       	push	r22
     8d4:	7f 93       	push	r23
     8d6:	8f 93       	push	r24
     8d8:	9f 93       	push	r25
     8da:	af 93       	push	r26
     8dc:	bf 93       	push	r27
     8de:	ef 93       	push	r30
     8e0:	ff 93       	push	r31
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
	static uint8_t INT_CNT_l = 0;
	INT_CNT_l++;
     8ea:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <INT_CNT_l.1674>
     8ee:	8f 5f       	subi	r24, 0xFF	; 255
     8f0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <INT_CNT_l.1674>
	if(INT_CNT_l == 1)
     8f4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <INT_CNT_l.1674>
     8f8:	81 30       	cpi	r24, 0x01	; 1
     8fa:	41 f4       	brne	.+16     	; 0x90c <__vector_7+0x4e>
	{
		(*CallBack_PtrFunc[Timer_Counter1_Compare_Match_A_VECTOR_INDEX])();
     8fc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <CallBack_PtrFunc+0xc>
     900:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <CallBack_PtrFunc+0xd>
     904:	fc 01       	movw	r30, r24
     906:	09 95       	icall
		INT_CNT_l = 0;
     908:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <INT_CNT_l.1674>
	}
}
     90c:	00 00       	nop
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	ff 91       	pop	r31
     914:	ef 91       	pop	r30
     916:	bf 91       	pop	r27
     918:	af 91       	pop	r26
     91a:	9f 91       	pop	r25
     91c:	8f 91       	pop	r24
     91e:	7f 91       	pop	r23
     920:	6f 91       	pop	r22
     922:	5f 91       	pop	r21
     924:	4f 91       	pop	r20
     926:	3f 91       	pop	r19
     928:	2f 91       	pop	r18
     92a:	0f 90       	pop	r0
     92c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     930:	0f 90       	pop	r0
     932:	1f 90       	pop	r1
     934:	18 95       	reti

00000936 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     936:	1f 92       	push	r1
     938:	0f 92       	push	r0
     93a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     93e:	0f 92       	push	r0
     940:	11 24       	eor	r1, r1
     942:	8f 93       	push	r24
     944:	9f 93       	push	r25
     946:	af 93       	push	r26
     948:	bf 93       	push	r27
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
	
	TIMER1_Number_OVRflows_g++;
     952:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <TIMER1_Number_OVRflows_g>
     956:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <TIMER1_Number_OVRflows_g+0x1>
     95a:	a0 91 be 00 	lds	r26, 0x00BE	; 0x8000be <TIMER1_Number_OVRflows_g+0x2>
     95e:	b0 91 bf 00 	lds	r27, 0x00BF	; 0x8000bf <TIMER1_Number_OVRflows_g+0x3>
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	a1 1d       	adc	r26, r1
     966:	b1 1d       	adc	r27, r1
     968:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <TIMER1_Number_OVRflows_g>
     96c:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <TIMER1_Number_OVRflows_g+0x1>
     970:	a0 93 be 00 	sts	0x00BE, r26	; 0x8000be <TIMER1_Number_OVRflows_g+0x2>
     974:	b0 93 bf 00 	sts	0x00BF, r27	; 0x8000bf <TIMER1_Number_OVRflows_g+0x3>

}
     978:	00 00       	nop
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	bf 91       	pop	r27
     980:	af 91       	pop	r26
     982:	9f 91       	pop	r25
     984:	8f 91       	pop	r24
     986:	0f 90       	pop	r0
     988:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     98c:	0f 90       	pop	r0
     98e:	1f 90       	pop	r1
     990:	18 95       	reti

00000992 <__vector_6>:


ISR(TIMER1_CAPT_vect)
{
     992:	1f 92       	push	r1
     994:	0f 92       	push	r0
     996:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     99a:	0f 92       	push	r0
     99c:	11 24       	eor	r1, r1
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	2f 93       	push	r18
     9a8:	3f 93       	push	r19
     9aa:	4f 93       	push	r20
     9ac:	5f 93       	push	r21
     9ae:	6f 93       	push	r22
     9b0:	7f 93       	push	r23
     9b2:	8f 93       	push	r24
     9b4:	9f 93       	push	r25
     9b6:	af 93       	push	r26
     9b8:	bf 93       	push	r27
     9ba:	ef 93       	push	r30
     9bc:	ff 93       	push	r31
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62

	Capture_Flag++;
     9c6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <Capture_Flag>
     9ca:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <Capture_Flag+0x1>
     9ce:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <Capture_Flag+0x2>
     9d2:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <Capture_Flag+0x3>
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	a1 1d       	adc	r26, r1
     9da:	b1 1d       	adc	r27, r1
     9dc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <Capture_Flag>
     9e0:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <Capture_Flag+0x1>
     9e4:	a0 93 92 00 	sts	0x0092, r26	; 0x800092 <Capture_Flag+0x2>
     9e8:	b0 93 93 00 	sts	0x0093, r27	; 0x800093 <Capture_Flag+0x3>

	if(Capture_Flag == 1)
     9ec:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <Capture_Flag>
     9f0:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <Capture_Flag+0x1>
     9f4:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <Capture_Flag+0x2>
     9f8:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <Capture_Flag+0x3>
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	a1 05       	cpc	r26, r1
     a00:	b1 05       	cpc	r27, r1
     a02:	11 f5       	brne	.+68     	; 0xa48 <__vector_6+0xb6>
	{
		Captured_Readings_1 = ICR1_16BIT_ACCESS;
     a04:	86 e4       	ldi	r24, 0x46	; 70
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	fc 01       	movw	r30, r24
     a0a:	80 81       	ld	r24, Z
     a0c:	91 81       	ldd	r25, Z+1	; 0x01
     a0e:	cc 01       	movw	r24, r24
     a10:	a0 e0       	ldi	r26, 0x00	; 0
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <Captured_Readings_1>
     a18:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <Captured_Readings_1+0x1>
     a1c:	a0 93 86 00 	sts	0x0086, r26	; 0x800086 <Captured_Readings_1+0x2>
     a20:	b0 93 87 00 	sts	0x0087, r27	; 0x800087 <Captured_Readings_1+0x3>
		TIMER1_Number_OVRflows_g = 0;
     a24:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <TIMER1_Number_OVRflows_g>
     a28:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <TIMER1_Number_OVRflows_g+0x1>
     a2c:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <TIMER1_Number_OVRflows_g+0x2>
     a30:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <TIMER1_Number_OVRflows_g+0x3>
		/*detect falling edge*/
		CLR_BIT(TCCR1B,6);
     a34:	8e e4       	ldi	r24, 0x4E	; 78
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	2e e4       	ldi	r18, 0x4E	; 78
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	f9 01       	movw	r30, r18
     a3e:	20 81       	ld	r18, Z
     a40:	2f 7b       	andi	r18, 0xBF	; 191
     a42:	fc 01       	movw	r30, r24
     a44:	20 83       	st	Z, r18
		Captured_Readings_3= ICR1_16BIT_ACCESS + (TIMER1_Number_OVRflows_g * 65535);
		
		CLR_BIT(TIMSK,5);
	}

}
     a46:	71 c0       	rjmp	.+226    	; 0xb2a <__vector_6+0x198>
		Captured_Readings_1 = ICR1_16BIT_ACCESS;
		TIMER1_Number_OVRflows_g = 0;
		/*detect falling edge*/
		CLR_BIT(TCCR1B,6);
	}
	else if(Capture_Flag == 2)
     a48:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <Capture_Flag>
     a4c:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <Capture_Flag+0x1>
     a50:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <Capture_Flag+0x2>
     a54:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <Capture_Flag+0x3>
     a58:	02 97       	sbiw	r24, 0x02	; 2
     a5a:	a1 05       	cpc	r26, r1
     a5c:	b1 05       	cpc	r27, r1
     a5e:	69 f5       	brne	.+90     	; 0xaba <__vector_6+0x128>
	{
		Captured_Readings_2 = ICR1_16BIT_ACCESS + (TIMER1_Number_OVRflows_g * 65535);
     a60:	86 e4       	ldi	r24, 0x46	; 70
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	fc 01       	movw	r30, r24
     a66:	80 81       	ld	r24, Z
     a68:	91 81       	ldd	r25, Z+1	; 0x01
     a6a:	7c 01       	movw	r14, r24
     a6c:	00 e0       	ldi	r16, 0x00	; 0
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <TIMER1_Number_OVRflows_g>
     a74:	30 91 bd 00 	lds	r19, 0x00BD	; 0x8000bd <TIMER1_Number_OVRflows_g+0x1>
     a78:	40 91 be 00 	lds	r20, 0x00BE	; 0x8000be <TIMER1_Number_OVRflows_g+0x2>
     a7c:	50 91 bf 00 	lds	r21, 0x00BF	; 0x8000bf <TIMER1_Number_OVRflows_g+0x3>
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	9f ef       	ldi	r25, 0xFF	; 255
     a84:	dc 01       	movw	r26, r24
     a86:	0e 94 87 09 	call	0x130e	; 0x130e <__muluhisi3>
     a8a:	dc 01       	movw	r26, r24
     a8c:	cb 01       	movw	r24, r22
     a8e:	8e 0d       	add	r24, r14
     a90:	9f 1d       	adc	r25, r15
     a92:	a0 1f       	adc	r26, r16
     a94:	b1 1f       	adc	r27, r17
     a96:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <Captured_Readings_2>
     a9a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <Captured_Readings_2+0x1>
     a9e:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <Captured_Readings_2+0x2>
     aa2:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <Captured_Readings_2+0x3>
		/*detect rising edge*/
		SET_BIT(TCCR1B,6);
     aa6:	8e e4       	ldi	r24, 0x4E	; 78
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	2e e4       	ldi	r18, 0x4E	; 78
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	f9 01       	movw	r30, r18
     ab0:	20 81       	ld	r18, Z
     ab2:	20 64       	ori	r18, 0x40	; 64
     ab4:	fc 01       	movw	r30, r24
     ab6:	20 83       	st	Z, r18
		Captured_Readings_3= ICR1_16BIT_ACCESS + (TIMER1_Number_OVRflows_g * 65535);
		
		CLR_BIT(TIMSK,5);
	}

}
     ab8:	38 c0       	rjmp	.+112    	; 0xb2a <__vector_6+0x198>
		Captured_Readings_2 = ICR1_16BIT_ACCESS + (TIMER1_Number_OVRflows_g * 65535);
		/*detect rising edge*/
		SET_BIT(TCCR1B,6);

	}
	else if(Capture_Flag == 3)
     aba:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <Capture_Flag>
     abe:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <Capture_Flag+0x1>
     ac2:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <Capture_Flag+0x2>
     ac6:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <Capture_Flag+0x3>
     aca:	03 97       	sbiw	r24, 0x03	; 3
     acc:	a1 05       	cpc	r26, r1
     ace:	b1 05       	cpc	r27, r1
     ad0:	61 f5       	brne	.+88     	; 0xb2a <__vector_6+0x198>
	{
		Captured_Readings_3= ICR1_16BIT_ACCESS + (TIMER1_Number_OVRflows_g * 65535);
     ad2:	86 e4       	ldi	r24, 0x46	; 70
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	fc 01       	movw	r30, r24
     ad8:	80 81       	ld	r24, Z
     ada:	91 81       	ldd	r25, Z+1	; 0x01
     adc:	7c 01       	movw	r14, r24
     ade:	00 e0       	ldi	r16, 0x00	; 0
     ae0:	10 e0       	ldi	r17, 0x00	; 0
     ae2:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <TIMER1_Number_OVRflows_g>
     ae6:	30 91 bd 00 	lds	r19, 0x00BD	; 0x8000bd <TIMER1_Number_OVRflows_g+0x1>
     aea:	40 91 be 00 	lds	r20, 0x00BE	; 0x8000be <TIMER1_Number_OVRflows_g+0x2>
     aee:	50 91 bf 00 	lds	r21, 0x00BF	; 0x8000bf <TIMER1_Number_OVRflows_g+0x3>
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	9f ef       	ldi	r25, 0xFF	; 255
     af6:	dc 01       	movw	r26, r24
     af8:	0e 94 87 09 	call	0x130e	; 0x130e <__muluhisi3>
     afc:	dc 01       	movw	r26, r24
     afe:	cb 01       	movw	r24, r22
     b00:	8e 0d       	add	r24, r14
     b02:	9f 1d       	adc	r25, r15
     b04:	a0 1f       	adc	r26, r16
     b06:	b1 1f       	adc	r27, r17
     b08:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <Captured_Readings_3>
     b0c:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <Captured_Readings_3+0x1>
     b10:	a0 93 8e 00 	sts	0x008E, r26	; 0x80008e <Captured_Readings_3+0x2>
     b14:	b0 93 8f 00 	sts	0x008F, r27	; 0x80008f <Captured_Readings_3+0x3>
		
		CLR_BIT(TIMSK,5);
     b18:	89 e5       	ldi	r24, 0x59	; 89
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	29 e5       	ldi	r18, 0x59	; 89
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	f9 01       	movw	r30, r18
     b22:	20 81       	ld	r18, Z
     b24:	2f 7d       	andi	r18, 0xDF	; 223
     b26:	fc 01       	movw	r30, r24
     b28:	20 83       	st	Z, r18
	}

}
     b2a:	00 00       	nop
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	ff 91       	pop	r31
     b32:	ef 91       	pop	r30
     b34:	bf 91       	pop	r27
     b36:	af 91       	pop	r26
     b38:	9f 91       	pop	r25
     b3a:	8f 91       	pop	r24
     b3c:	7f 91       	pop	r23
     b3e:	6f 91       	pop	r22
     b40:	5f 91       	pop	r21
     b42:	4f 91       	pop	r20
     b44:	3f 91       	pop	r19
     b46:	2f 91       	pop	r18
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	0f 90       	pop	r0
     b52:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     b56:	0f 90       	pop	r0
     b58:	1f 90       	pop	r1
     b5a:	18 95       	reti

00000b5c <__vector_13>:


ISR(USART_RXC_vect)
{
     b5c:	1f 92       	push	r1
     b5e:	0f 92       	push	r0
     b60:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	2f 93       	push	r18
     b6a:	3f 93       	push	r19
     b6c:	4f 93       	push	r20
     b6e:	5f 93       	push	r21
     b70:	6f 93       	push	r22
     b72:	7f 93       	push	r23
     b74:	8f 93       	push	r24
     b76:	9f 93       	push	r25
     b78:	af 93       	push	r26
     b7a:	bf 93       	push	r27
     b7c:	ef 93       	push	r30
     b7e:	ff 93       	push	r31
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
 	if(CallBack_PtrFunc[USART_Rx_Complete_VECTOR_INDEX] != Null)
     b88:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <CallBack_PtrFunc+0x18>
     b8c:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <CallBack_PtrFunc+0x19>
     b90:	89 2b       	or	r24, r25
     b92:	31 f0       	breq	.+12     	; 0xba0 <__vector_13+0x44>
    {
	 	(*CallBack_PtrFunc[USART_Rx_Complete_VECTOR_INDEX])();
     b94:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <CallBack_PtrFunc+0x18>
     b98:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <CallBack_PtrFunc+0x19>
     b9c:	fc 01       	movw	r30, r24
     b9e:	09 95       	icall
 	}	
}
     ba0:	00 00       	nop
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	ff 91       	pop	r31
     ba8:	ef 91       	pop	r30
     baa:	bf 91       	pop	r27
     bac:	af 91       	pop	r26
     bae:	9f 91       	pop	r25
     bb0:	8f 91       	pop	r24
     bb2:	7f 91       	pop	r23
     bb4:	6f 91       	pop	r22
     bb6:	5f 91       	pop	r21
     bb8:	4f 91       	pop	r20
     bba:	3f 91       	pop	r19
     bbc:	2f 91       	pop	r18
     bbe:	0f 90       	pop	r0
     bc0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     bc4:	0f 90       	pop	r0
     bc6:	1f 90       	pop	r1
     bc8:	18 95       	reti

00000bca <__vector_15>:


ISR(USART_TXC_vect)
{
     bca:	1f 92       	push	r1
     bcc:	0f 92       	push	r0
     bce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     bd2:	0f 92       	push	r0
     bd4:	11 24       	eor	r1, r1
     bd6:	8f 93       	push	r24
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
	TX_STATUS_FLAG = 1;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <TX_STATUS_FLAG>
	TX_Cnt ++;
     be6:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <TX_Cnt>
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <TX_Cnt>
}
     bf0:	00 00       	nop
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	8f 91       	pop	r24
     bf8:	0f 90       	pop	r0
     bfa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     bfe:	0f 90       	pop	r0
     c00:	1f 90       	pop	r1
     c02:	18 95       	reti

00000c04 <Sine_without_lut>:
* \Parameters (in) : parameterName   Parameter Describtion
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void  Sine_without_lut(){
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	2a 97       	sbiw	r28, 0x0a	; 10
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
   GPT_Init(); 
     c18:	0e 94 3f 03 	call	0x67e	; 0x67e <GPT_Init>
	while(1){
	//every tick is 0.125 us
	double angle_in_radians = ANGLE * (PI / 180.0);  // Convert degrees to radians
     c1c:	8b ed       	ldi	r24, 0xDB	; 219
     c1e:	9f e0       	ldi	r25, 0x0F	; 15
     c20:	a9 e4       	ldi	r26, 0x49	; 73
     c22:	bf e3       	ldi	r27, 0x3F	; 63
     c24:	8b 83       	std	Y+3, r24	; 0x03
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	ad 83       	std	Y+5, r26	; 0x05
     c2a:	be 83       	std	Y+6, r27	; 0x06
	DIO_WriteChennel(PORTC_PIN0,PIN_HIGH);
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	80 e1       	ldi	r24, 0x10	; 16
     c30:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>
	//TCNT0=0;
	for(uint16_t i=0; i < 1000 ;i++)
     c34:	1a 82       	std	Y+2, r1	; 0x02
     c36:	19 82       	std	Y+1, r1	; 0x01
     c38:	13 c0       	rjmp	.+38     	; 0xc60 <Sine_without_lut+0x5c>
	{
		double sine_from_math_lib = sin(angle_in_radians);
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	ad 81       	ldd	r26, Y+5	; 0x05
     c40:	be 81       	ldd	r27, Y+6	; 0x06
     c42:	bc 01       	movw	r22, r24
     c44:	cd 01       	movw	r24, r26
     c46:	0e 94 6f 08 	call	0x10de	; 0x10de <sin>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	8f 83       	std	Y+7, r24	; 0x07
     c50:	98 87       	std	Y+8, r25	; 0x08
     c52:	a9 87       	std	Y+9, r26	; 0x09
     c54:	ba 87       	std	Y+10, r27	; 0x0a
	while(1){
	//every tick is 0.125 us
	double angle_in_radians = ANGLE * (PI / 180.0);  // Convert degrees to radians
	DIO_WriteChennel(PORTC_PIN0,PIN_HIGH);
	//TCNT0=0;
	for(uint16_t i=0; i < 1000 ;i++)
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	9a 81       	ldd	r25, Y+2	; 0x02
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	9a 83       	std	Y+2, r25	; 0x02
     c5e:	89 83       	std	Y+1, r24	; 0x01
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	88 3e       	cpi	r24, 0xE8	; 232
     c66:	93 40       	sbci	r25, 0x03	; 3
     c68:	40 f3       	brcs	.-48     	; 0xc3a <Sine_without_lut+0x36>
	{
		double sine_from_math_lib = sin(angle_in_radians);
	}
	//Counter2=TCNT0;
	
	DIO_WriteChennel(PORTC_PIN0,PIN_LOW);
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	80 e1       	ldi	r24, 0x10	; 16
     c6e:	0e 94 48 02 	call	0x490	; 0x490 <DIO_WriteChennel>
	//244  us
	//LCD_WriteInteger(Counter2);
	//LCD_WriteString(" ");
	
}
     c72:	d4 cf       	rjmp	.-88     	; 0xc1c <Sine_without_lut+0x18>

00000c74 <PORT_Init>:
* \Parameters (out): None                                                      
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void PORT_Init(void)
{
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	00 d0       	rcall	.+0      	; 0xc7a <PORT_Init+0x6>
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <PORT_Init+0x8>
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
	uint8_t Cnt = 0 , Port = 0 , Pin = 0 , Dir = 0 ;
     c80:	19 82       	std	Y+1, r1	; 0x01
     c82:	1a 82       	std	Y+2, r1	; 0x02
     c84:	1b 82       	std	Y+3, r1	; 0x03
     c86:	1c 82       	std	Y+4, r1	; 0x04
	
	for(Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt++)
     c88:	19 82       	std	Y+1, r1	; 0x01
     c8a:	02 c1       	rjmp	.+516    	; 0xe90 <PORT_Init+0x21c>
	{
		Port = PORT_Initialization[Cnt].PIN_NUM / NUMBER_OF_EACH_PORT_PINS ;
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	80 5a       	subi	r24, 0xA0	; 160
     c98:	9f 4f       	sbci	r25, 0xFF	; 255
     c9a:	fc 01       	movw	r30, r24
     c9c:	80 81       	ld	r24, Z
     c9e:	86 95       	lsr	r24
     ca0:	86 95       	lsr	r24
     ca2:	86 95       	lsr	r24
     ca4:	8a 83       	std	Y+2, r24	; 0x02
		Pin = PORT_Initialization[Cnt].PIN_NUM % NUMBER_OF_EACH_PORT_PINS  ;
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	80 5a       	subi	r24, 0xA0	; 160
     cb2:	9f 4f       	sbci	r25, 0xFF	; 255
     cb4:	fc 01       	movw	r30, r24
     cb6:	80 81       	ld	r24, Z
     cb8:	87 70       	andi	r24, 0x07	; 7
     cba:	8b 83       	std	Y+3, r24	; 0x03
		Dir = PORT_Initialization[Cnt].PIN_DIR ;
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	88 2f       	mov	r24, r24
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	8f 59       	subi	r24, 0x9F	; 159
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	fc 01       	movw	r30, r24
     ccc:	80 81       	ld	r24, Z
     cce:	8c 83       	std	Y+4, r24	; 0x04
		
		switch(Dir)
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	88 2f       	mov	r24, r24
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	09 f4       	brne	.+2      	; 0xcdc <PORT_Init+0x68>
     cda:	6b c0       	rjmp	.+214    	; 0xdb2 <PORT_Init+0x13e>
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	09 f0       	breq	.+2      	; 0xce2 <PORT_Init+0x6e>
				break;
			}
			break;
			
			default:
			break;
     ce0:	d4 c0       	rjmp	.+424    	; 0xe8a <PORT_Init+0x216>
		
		switch(Dir)
		{
			case PIN_OUTPUT :
			
			switch(Port)
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	91 05       	cpc	r25, r1
     cec:	11 f1       	breq	.+68     	; 0xd32 <PORT_Init+0xbe>
     cee:	82 30       	cpi	r24, 0x02	; 2
     cf0:	91 05       	cpc	r25, r1
     cf2:	1c f4       	brge	.+6      	; 0xcfa <PORT_Init+0x86>
     cf4:	89 2b       	or	r24, r25
     cf6:	41 f0       	breq	.+16     	; 0xd08 <PORT_Init+0x94>
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
				
				break;
				
				default:
				break;
     cf8:	5b c0       	rjmp	.+182    	; 0xdb0 <PORT_Init+0x13c>
		
		switch(Dir)
		{
			case PIN_OUTPUT :
			
			switch(Port)
     cfa:	82 30       	cpi	r24, 0x02	; 2
     cfc:	91 05       	cpc	r25, r1
     cfe:	71 f1       	breq	.+92     	; 0xd5c <PORT_Init+0xe8>
     d00:	03 97       	sbiw	r24, 0x03	; 3
     d02:	09 f4       	brne	.+2      	; 0xd06 <PORT_Init+0x92>
     d04:	40 c0       	rjmp	.+128    	; 0xd86 <PORT_Init+0x112>
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
				
				break;
				
				default:
				break;
     d06:	54 c0       	rjmp	.+168    	; 0xdb0 <PORT_Init+0x13c>
			case PIN_OUTPUT :
			
			switch(Port)
			{
				case 0:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
     d08:	8a e3       	ldi	r24, 0x3A	; 58
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	2a e3       	ldi	r18, 0x3A	; 58
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	f9 01       	movw	r30, r18
     d12:	20 81       	ld	r18, Z
     d14:	62 2f       	mov	r22, r18
     d16:	2b 81       	ldd	r18, Y+3	; 0x03
     d18:	42 2f       	mov	r20, r18
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	21 e0       	ldi	r18, 0x01	; 1
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <PORT_Init+0xb2>
     d22:	22 0f       	add	r18, r18
     d24:	33 1f       	adc	r19, r19
     d26:	4a 95       	dec	r20
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <PORT_Init+0xae>
     d2a:	26 2b       	or	r18, r22
     d2c:	fc 01       	movw	r30, r24
     d2e:	20 83       	st	Z, r18

				break;
     d30:	3f c0       	rjmp	.+126    	; 0xdb0 <PORT_Init+0x13c>
				
				case 1:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
     d32:	87 e3       	ldi	r24, 0x37	; 55
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	27 e3       	ldi	r18, 0x37	; 55
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	f9 01       	movw	r30, r18
     d3c:	20 81       	ld	r18, Z
     d3e:	62 2f       	mov	r22, r18
     d40:	2b 81       	ldd	r18, Y+3	; 0x03
     d42:	42 2f       	mov	r20, r18
     d44:	50 e0       	ldi	r21, 0x00	; 0
     d46:	21 e0       	ldi	r18, 0x01	; 1
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <PORT_Init+0xdc>
     d4c:	22 0f       	add	r18, r18
     d4e:	33 1f       	adc	r19, r19
     d50:	4a 95       	dec	r20
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <PORT_Init+0xd8>
     d54:	26 2b       	or	r18, r22
     d56:	fc 01       	movw	r30, r24
     d58:	20 83       	st	Z, r18
				
				break;
     d5a:	2a c0       	rjmp	.+84     	; 0xdb0 <PORT_Init+0x13c>
				
				case 2:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
     d5c:	84 e3       	ldi	r24, 0x34	; 52
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	24 e3       	ldi	r18, 0x34	; 52
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	f9 01       	movw	r30, r18
     d66:	20 81       	ld	r18, Z
     d68:	62 2f       	mov	r22, r18
     d6a:	2b 81       	ldd	r18, Y+3	; 0x03
     d6c:	42 2f       	mov	r20, r18
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	21 e0       	ldi	r18, 0x01	; 1
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <PORT_Init+0x106>
     d76:	22 0f       	add	r18, r18
     d78:	33 1f       	adc	r19, r19
     d7a:	4a 95       	dec	r20
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <PORT_Init+0x102>
     d7e:	26 2b       	or	r18, r22
     d80:	fc 01       	movw	r30, r24
     d82:	20 83       	st	Z, r18
				
				break;
     d84:	15 c0       	rjmp	.+42     	; 0xdb0 <PORT_Init+0x13c>
				
				case 3:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
     d86:	81 e3       	ldi	r24, 0x31	; 49
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	21 e3       	ldi	r18, 0x31	; 49
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	f9 01       	movw	r30, r18
     d90:	20 81       	ld	r18, Z
     d92:	62 2f       	mov	r22, r18
     d94:	2b 81       	ldd	r18, Y+3	; 0x03
     d96:	42 2f       	mov	r20, r18
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	21 e0       	ldi	r18, 0x01	; 1
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <PORT_Init+0x130>
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	4a 95       	dec	r20
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <PORT_Init+0x12c>
     da8:	26 2b       	or	r18, r22
     daa:	fc 01       	movw	r30, r24
     dac:	20 83       	st	Z, r18
				
				break;
     dae:	00 00       	nop
				
				default:
				break;
			}
			break;
     db0:	6c c0       	rjmp	.+216    	; 0xe8a <PORT_Init+0x216>
			
			case PIN_INPUT :
			switch(Port)
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	91 05       	cpc	r25, r1
     dbc:	19 f1       	breq	.+70     	; 0xe04 <PORT_Init+0x190>
     dbe:	82 30       	cpi	r24, 0x02	; 2
     dc0:	91 05       	cpc	r25, r1
     dc2:	1c f4       	brge	.+6      	; 0xdca <PORT_Init+0x156>
     dc4:	89 2b       	or	r24, r25
     dc6:	41 f0       	breq	.+16     	; 0xdd8 <PORT_Init+0x164>
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
				
				break;
				
				default:
				break;
     dc8:	5f c0       	rjmp	.+190    	; 0xe88 <PORT_Init+0x214>
				break;
			}
			break;
			
			case PIN_INPUT :
			switch(Port)
     dca:	82 30       	cpi	r24, 0x02	; 2
     dcc:	91 05       	cpc	r25, r1
     dce:	81 f1       	breq	.+96     	; 0xe30 <PORT_Init+0x1bc>
     dd0:	03 97       	sbiw	r24, 0x03	; 3
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <PORT_Init+0x162>
     dd4:	43 c0       	rjmp	.+134    	; 0xe5c <PORT_Init+0x1e8>
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
				
				break;
				
				default:
				break;
     dd6:	58 c0       	rjmp	.+176    	; 0xe88 <PORT_Init+0x214>
			
			case PIN_INPUT :
			switch(Port)
			{
				case 0:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
     dd8:	8a e3       	ldi	r24, 0x3A	; 58
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	2a e3       	ldi	r18, 0x3A	; 58
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	f9 01       	movw	r30, r18
     de2:	20 81       	ld	r18, Z
     de4:	62 2f       	mov	r22, r18
     de6:	2b 81       	ldd	r18, Y+3	; 0x03
     de8:	42 2f       	mov	r20, r18
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	21 e0       	ldi	r18, 0x01	; 1
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <PORT_Init+0x182>
     df2:	22 0f       	add	r18, r18
     df4:	33 1f       	adc	r19, r19
     df6:	4a 95       	dec	r20
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <PORT_Init+0x17e>
     dfa:	20 95       	com	r18
     dfc:	26 23       	and	r18, r22
     dfe:	fc 01       	movw	r30, r24
     e00:	20 83       	st	Z, r18

				break;
     e02:	42 c0       	rjmp	.+132    	; 0xe88 <PORT_Init+0x214>
				
				case 1:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
     e04:	87 e3       	ldi	r24, 0x37	; 55
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	27 e3       	ldi	r18, 0x37	; 55
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	f9 01       	movw	r30, r18
     e0e:	20 81       	ld	r18, Z
     e10:	62 2f       	mov	r22, r18
     e12:	2b 81       	ldd	r18, Y+3	; 0x03
     e14:	42 2f       	mov	r20, r18
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	21 e0       	ldi	r18, 0x01	; 1
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <PORT_Init+0x1ae>
     e1e:	22 0f       	add	r18, r18
     e20:	33 1f       	adc	r19, r19
     e22:	4a 95       	dec	r20
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <PORT_Init+0x1aa>
     e26:	20 95       	com	r18
     e28:	26 23       	and	r18, r22
     e2a:	fc 01       	movw	r30, r24
     e2c:	20 83       	st	Z, r18
				
				break;
     e2e:	2c c0       	rjmp	.+88     	; 0xe88 <PORT_Init+0x214>
				
				case 2:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
     e30:	84 e3       	ldi	r24, 0x34	; 52
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	24 e3       	ldi	r18, 0x34	; 52
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	f9 01       	movw	r30, r18
     e3a:	20 81       	ld	r18, Z
     e3c:	62 2f       	mov	r22, r18
     e3e:	2b 81       	ldd	r18, Y+3	; 0x03
     e40:	42 2f       	mov	r20, r18
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	21 e0       	ldi	r18, 0x01	; 1
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <PORT_Init+0x1da>
     e4a:	22 0f       	add	r18, r18
     e4c:	33 1f       	adc	r19, r19
     e4e:	4a 95       	dec	r20
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <PORT_Init+0x1d6>
     e52:	20 95       	com	r18
     e54:	26 23       	and	r18, r22
     e56:	fc 01       	movw	r30, r24
     e58:	20 83       	st	Z, r18
				
				break;
     e5a:	16 c0       	rjmp	.+44     	; 0xe88 <PORT_Init+0x214>
				
				case 3:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) ,Pin );
     e5c:	81 e3       	ldi	r24, 0x31	; 49
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	21 e3       	ldi	r18, 0x31	; 49
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	f9 01       	movw	r30, r18
     e66:	20 81       	ld	r18, Z
     e68:	62 2f       	mov	r22, r18
     e6a:	2b 81       	ldd	r18, Y+3	; 0x03
     e6c:	42 2f       	mov	r20, r18
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	21 e0       	ldi	r18, 0x01	; 1
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <PORT_Init+0x206>
     e76:	22 0f       	add	r18, r18
     e78:	33 1f       	adc	r19, r19
     e7a:	4a 95       	dec	r20
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <PORT_Init+0x202>
     e7e:	20 95       	com	r18
     e80:	26 23       	and	r18, r22
     e82:	fc 01       	movw	r30, r24
     e84:	20 83       	st	Z, r18
				
				break;
     e86:	00 00       	nop
				
				default:
				break;
			}
			break;
     e88:	00 00       	nop
*******************************************************************************/
void PORT_Init(void)
{
	uint8_t Cnt = 0 , Port = 0 , Pin = 0 , Dir = 0 ;
	
	for(Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt++)
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	8f 5f       	subi	r24, 0xFF	; 255
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	8c 30       	cpi	r24, 0x0C	; 12
     e94:	08 f4       	brcc	.+2      	; 0xe98 <PORT_Init+0x224>
     e96:	fa ce       	rjmp	.-524    	; 0xc8c <PORT_Init+0x18>
			
			default:
			break;
		}
	}
}
     e98:	00 00       	nop
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	08 95       	ret

00000ea8 <__cmpsf2>:
     ea8:	0e 94 88 07 	call	0xf10	; 0xf10 <__fp_cmp>
     eac:	08 f4       	brcc	.+2      	; 0xeb0 <__cmpsf2+0x8>
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	08 95       	ret

00000eb2 <__fixunssfsi>:
     eb2:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__fp_splitA>
     eb6:	88 f0       	brcs	.+34     	; 0xeda <__fixunssfsi+0x28>
     eb8:	9f 57       	subi	r25, 0x7F	; 127
     eba:	98 f0       	brcs	.+38     	; 0xee2 <__fixunssfsi+0x30>
     ebc:	b9 2f       	mov	r27, r25
     ebe:	99 27       	eor	r25, r25
     ec0:	b7 51       	subi	r27, 0x17	; 23
     ec2:	b0 f0       	brcs	.+44     	; 0xef0 <__fixunssfsi+0x3e>
     ec4:	e1 f0       	breq	.+56     	; 0xefe <__fixunssfsi+0x4c>
     ec6:	66 0f       	add	r22, r22
     ec8:	77 1f       	adc	r23, r23
     eca:	88 1f       	adc	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	1a f0       	brmi	.+6      	; 0xed6 <__fixunssfsi+0x24>
     ed0:	ba 95       	dec	r27
     ed2:	c9 f7       	brne	.-14     	; 0xec6 <__fixunssfsi+0x14>
     ed4:	14 c0       	rjmp	.+40     	; 0xefe <__fixunssfsi+0x4c>
     ed6:	b1 30       	cpi	r27, 0x01	; 1
     ed8:	91 f0       	breq	.+36     	; 0xefe <__fixunssfsi+0x4c>
     eda:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_zero>
     ede:	b1 e0       	ldi	r27, 0x01	; 1
     ee0:	08 95       	ret
     ee2:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_zero>
     ee6:	67 2f       	mov	r22, r23
     ee8:	78 2f       	mov	r23, r24
     eea:	88 27       	eor	r24, r24
     eec:	b8 5f       	subi	r27, 0xF8	; 248
     eee:	39 f0       	breq	.+14     	; 0xefe <__fixunssfsi+0x4c>
     ef0:	b9 3f       	cpi	r27, 0xF9	; 249
     ef2:	cc f3       	brlt	.-14     	; 0xee6 <__fixunssfsi+0x34>
     ef4:	86 95       	lsr	r24
     ef6:	77 95       	ror	r23
     ef8:	67 95       	ror	r22
     efa:	b3 95       	inc	r27
     efc:	d9 f7       	brne	.-10     	; 0xef4 <__fixunssfsi+0x42>
     efe:	3e f4       	brtc	.+14     	; 0xf0e <__fixunssfsi+0x5c>
     f00:	90 95       	com	r25
     f02:	80 95       	com	r24
     f04:	70 95       	com	r23
     f06:	61 95       	neg	r22
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	8f 4f       	sbci	r24, 0xFF	; 255
     f0c:	9f 4f       	sbci	r25, 0xFF	; 255
     f0e:	08 95       	ret

00000f10 <__fp_cmp>:
     f10:	99 0f       	add	r25, r25
     f12:	00 08       	sbc	r0, r0
     f14:	55 0f       	add	r21, r21
     f16:	aa 0b       	sbc	r26, r26
     f18:	e0 e8       	ldi	r30, 0x80	; 128
     f1a:	fe ef       	ldi	r31, 0xFE	; 254
     f1c:	16 16       	cp	r1, r22
     f1e:	17 06       	cpc	r1, r23
     f20:	e8 07       	cpc	r30, r24
     f22:	f9 07       	cpc	r31, r25
     f24:	c0 f0       	brcs	.+48     	; 0xf56 <__fp_cmp+0x46>
     f26:	12 16       	cp	r1, r18
     f28:	13 06       	cpc	r1, r19
     f2a:	e4 07       	cpc	r30, r20
     f2c:	f5 07       	cpc	r31, r21
     f2e:	98 f0       	brcs	.+38     	; 0xf56 <__fp_cmp+0x46>
     f30:	62 1b       	sub	r22, r18
     f32:	73 0b       	sbc	r23, r19
     f34:	84 0b       	sbc	r24, r20
     f36:	95 0b       	sbc	r25, r21
     f38:	39 f4       	brne	.+14     	; 0xf48 <__fp_cmp+0x38>
     f3a:	0a 26       	eor	r0, r26
     f3c:	61 f0       	breq	.+24     	; 0xf56 <__fp_cmp+0x46>
     f3e:	23 2b       	or	r18, r19
     f40:	24 2b       	or	r18, r20
     f42:	25 2b       	or	r18, r21
     f44:	21 f4       	brne	.+8      	; 0xf4e <__fp_cmp+0x3e>
     f46:	08 95       	ret
     f48:	0a 26       	eor	r0, r26
     f4a:	09 f4       	brne	.+2      	; 0xf4e <__fp_cmp+0x3e>
     f4c:	a1 40       	sbci	r26, 0x01	; 1
     f4e:	a6 95       	lsr	r26
     f50:	8f ef       	ldi	r24, 0xFF	; 255
     f52:	81 1d       	adc	r24, r1
     f54:	81 1d       	adc	r24, r1
     f56:	08 95       	ret

00000f58 <__fp_inf>:
     f58:	97 f9       	bld	r25, 7
     f5a:	9f 67       	ori	r25, 0x7F	; 127
     f5c:	80 e8       	ldi	r24, 0x80	; 128
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	08 95       	ret

00000f64 <__fp_nan>:
     f64:	9f ef       	ldi	r25, 0xFF	; 255
     f66:	80 ec       	ldi	r24, 0xC0	; 192
     f68:	08 95       	ret

00000f6a <__fp_pscA>:
     f6a:	00 24       	eor	r0, r0
     f6c:	0a 94       	dec	r0
     f6e:	16 16       	cp	r1, r22
     f70:	17 06       	cpc	r1, r23
     f72:	18 06       	cpc	r1, r24
     f74:	09 06       	cpc	r0, r25
     f76:	08 95       	ret

00000f78 <__fp_pscB>:
     f78:	00 24       	eor	r0, r0
     f7a:	0a 94       	dec	r0
     f7c:	12 16       	cp	r1, r18
     f7e:	13 06       	cpc	r1, r19
     f80:	14 06       	cpc	r1, r20
     f82:	05 06       	cpc	r0, r21
     f84:	08 95       	ret

00000f86 <__fp_round>:
     f86:	09 2e       	mov	r0, r25
     f88:	03 94       	inc	r0
     f8a:	00 0c       	add	r0, r0
     f8c:	11 f4       	brne	.+4      	; 0xf92 <__fp_round+0xc>
     f8e:	88 23       	and	r24, r24
     f90:	52 f0       	brmi	.+20     	; 0xfa6 <__fp_round+0x20>
     f92:	bb 0f       	add	r27, r27
     f94:	40 f4       	brcc	.+16     	; 0xfa6 <__fp_round+0x20>
     f96:	bf 2b       	or	r27, r31
     f98:	11 f4       	brne	.+4      	; 0xf9e <__fp_round+0x18>
     f9a:	60 ff       	sbrs	r22, 0
     f9c:	04 c0       	rjmp	.+8      	; 0xfa6 <__fp_round+0x20>
     f9e:	6f 5f       	subi	r22, 0xFF	; 255
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	8f 4f       	sbci	r24, 0xFF	; 255
     fa4:	9f 4f       	sbci	r25, 0xFF	; 255
     fa6:	08 95       	ret

00000fa8 <__fp_split3>:
     fa8:	57 fd       	sbrc	r21, 7
     faa:	90 58       	subi	r25, 0x80	; 128
     fac:	44 0f       	add	r20, r20
     fae:	55 1f       	adc	r21, r21
     fb0:	59 f0       	breq	.+22     	; 0xfc8 <__fp_splitA+0x10>
     fb2:	5f 3f       	cpi	r21, 0xFF	; 255
     fb4:	71 f0       	breq	.+28     	; 0xfd2 <__fp_splitA+0x1a>
     fb6:	47 95       	ror	r20

00000fb8 <__fp_splitA>:
     fb8:	88 0f       	add	r24, r24
     fba:	97 fb       	bst	r25, 7
     fbc:	99 1f       	adc	r25, r25
     fbe:	61 f0       	breq	.+24     	; 0xfd8 <__fp_splitA+0x20>
     fc0:	9f 3f       	cpi	r25, 0xFF	; 255
     fc2:	79 f0       	breq	.+30     	; 0xfe2 <__fp_splitA+0x2a>
     fc4:	87 95       	ror	r24
     fc6:	08 95       	ret
     fc8:	12 16       	cp	r1, r18
     fca:	13 06       	cpc	r1, r19
     fcc:	14 06       	cpc	r1, r20
     fce:	55 1f       	adc	r21, r21
     fd0:	f2 cf       	rjmp	.-28     	; 0xfb6 <__fp_split3+0xe>
     fd2:	46 95       	lsr	r20
     fd4:	f1 df       	rcall	.-30     	; 0xfb8 <__fp_splitA>
     fd6:	08 c0       	rjmp	.+16     	; 0xfe8 <__fp_splitA+0x30>
     fd8:	16 16       	cp	r1, r22
     fda:	17 06       	cpc	r1, r23
     fdc:	18 06       	cpc	r1, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	f1 cf       	rjmp	.-30     	; 0xfc4 <__fp_splitA+0xc>
     fe2:	86 95       	lsr	r24
     fe4:	71 05       	cpc	r23, r1
     fe6:	61 05       	cpc	r22, r1
     fe8:	08 94       	sec
     fea:	08 95       	ret

00000fec <__fp_zero>:
     fec:	e8 94       	clt

00000fee <__fp_szero>:
     fee:	bb 27       	eor	r27, r27
     ff0:	66 27       	eor	r22, r22
     ff2:	77 27       	eor	r23, r23
     ff4:	cb 01       	movw	r24, r22
     ff6:	97 f9       	bld	r25, 7
     ff8:	08 95       	ret

00000ffa <__gesf2>:
     ffa:	0e 94 88 07 	call	0xf10	; 0xf10 <__fp_cmp>
     ffe:	08 f4       	brcc	.+2      	; 0x1002 <__gesf2+0x8>
    1000:	8f ef       	ldi	r24, 0xFF	; 255
    1002:	08 95       	ret

00001004 <__mulsf3>:
    1004:	0e 94 15 08 	call	0x102a	; 0x102a <__mulsf3x>
    1008:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_round>
    100c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__fp_pscA>
    1010:	38 f0       	brcs	.+14     	; 0x1020 <__mulsf3+0x1c>
    1012:	0e 94 bc 07 	call	0xf78	; 0xf78 <__fp_pscB>
    1016:	20 f0       	brcs	.+8      	; 0x1020 <__mulsf3+0x1c>
    1018:	95 23       	and	r25, r21
    101a:	11 f0       	breq	.+4      	; 0x1020 <__mulsf3+0x1c>
    101c:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_inf>
    1020:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__fp_nan>
    1024:	11 24       	eor	r1, r1
    1026:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__fp_szero>

0000102a <__mulsf3x>:
    102a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__fp_split3>
    102e:	70 f3       	brcs	.-36     	; 0x100c <__mulsf3+0x8>

00001030 <__mulsf3_pse>:
    1030:	95 9f       	mul	r25, r21
    1032:	c1 f3       	breq	.-16     	; 0x1024 <__mulsf3+0x20>
    1034:	95 0f       	add	r25, r21
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	55 1f       	adc	r21, r21
    103a:	62 9f       	mul	r22, r18
    103c:	f0 01       	movw	r30, r0
    103e:	72 9f       	mul	r23, r18
    1040:	bb 27       	eor	r27, r27
    1042:	f0 0d       	add	r31, r0
    1044:	b1 1d       	adc	r27, r1
    1046:	63 9f       	mul	r22, r19
    1048:	aa 27       	eor	r26, r26
    104a:	f0 0d       	add	r31, r0
    104c:	b1 1d       	adc	r27, r1
    104e:	aa 1f       	adc	r26, r26
    1050:	64 9f       	mul	r22, r20
    1052:	66 27       	eor	r22, r22
    1054:	b0 0d       	add	r27, r0
    1056:	a1 1d       	adc	r26, r1
    1058:	66 1f       	adc	r22, r22
    105a:	82 9f       	mul	r24, r18
    105c:	22 27       	eor	r18, r18
    105e:	b0 0d       	add	r27, r0
    1060:	a1 1d       	adc	r26, r1
    1062:	62 1f       	adc	r22, r18
    1064:	73 9f       	mul	r23, r19
    1066:	b0 0d       	add	r27, r0
    1068:	a1 1d       	adc	r26, r1
    106a:	62 1f       	adc	r22, r18
    106c:	83 9f       	mul	r24, r19
    106e:	a0 0d       	add	r26, r0
    1070:	61 1d       	adc	r22, r1
    1072:	22 1f       	adc	r18, r18
    1074:	74 9f       	mul	r23, r20
    1076:	33 27       	eor	r19, r19
    1078:	a0 0d       	add	r26, r0
    107a:	61 1d       	adc	r22, r1
    107c:	23 1f       	adc	r18, r19
    107e:	84 9f       	mul	r24, r20
    1080:	60 0d       	add	r22, r0
    1082:	21 1d       	adc	r18, r1
    1084:	82 2f       	mov	r24, r18
    1086:	76 2f       	mov	r23, r22
    1088:	6a 2f       	mov	r22, r26
    108a:	11 24       	eor	r1, r1
    108c:	9f 57       	subi	r25, 0x7F	; 127
    108e:	50 40       	sbci	r21, 0x00	; 0
    1090:	9a f0       	brmi	.+38     	; 0x10b8 <__mulsf3_pse+0x88>
    1092:	f1 f0       	breq	.+60     	; 0x10d0 <__mulsf3_pse+0xa0>
    1094:	88 23       	and	r24, r24
    1096:	4a f0       	brmi	.+18     	; 0x10aa <__mulsf3_pse+0x7a>
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	bb 1f       	adc	r27, r27
    109e:	66 1f       	adc	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	88 1f       	adc	r24, r24
    10a4:	91 50       	subi	r25, 0x01	; 1
    10a6:	50 40       	sbci	r21, 0x00	; 0
    10a8:	a9 f7       	brne	.-22     	; 0x1094 <__mulsf3_pse+0x64>
    10aa:	9e 3f       	cpi	r25, 0xFE	; 254
    10ac:	51 05       	cpc	r21, r1
    10ae:	80 f0       	brcs	.+32     	; 0x10d0 <__mulsf3_pse+0xa0>
    10b0:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_inf>
    10b4:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__fp_szero>
    10b8:	5f 3f       	cpi	r21, 0xFF	; 255
    10ba:	e4 f3       	brlt	.-8      	; 0x10b4 <__mulsf3_pse+0x84>
    10bc:	98 3e       	cpi	r25, 0xE8	; 232
    10be:	d4 f3       	brlt	.-12     	; 0x10b4 <__mulsf3_pse+0x84>
    10c0:	86 95       	lsr	r24
    10c2:	77 95       	ror	r23
    10c4:	67 95       	ror	r22
    10c6:	b7 95       	ror	r27
    10c8:	f7 95       	ror	r31
    10ca:	e7 95       	ror	r30
    10cc:	9f 5f       	subi	r25, 0xFF	; 255
    10ce:	c1 f7       	brne	.-16     	; 0x10c0 <__mulsf3_pse+0x90>
    10d0:	fe 2b       	or	r31, r30
    10d2:	88 0f       	add	r24, r24
    10d4:	91 1d       	adc	r25, r1
    10d6:	96 95       	lsr	r25
    10d8:	87 95       	ror	r24
    10da:	97 f9       	bld	r25, 7
    10dc:	08 95       	ret

000010de <sin>:
    10de:	9f 93       	push	r25
    10e0:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__fp_rempio2>
    10e4:	0f 90       	pop	r0
    10e6:	07 fc       	sbrc	r0, 7
    10e8:	ee 5f       	subi	r30, 0xFE	; 254
    10ea:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <__fp_sinus>
    10ee:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__fp_nan>

000010f2 <__fp_rempio2>:
    10f2:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__fp_splitA>
    10f6:	d8 f3       	brcs	.-10     	; 0x10ee <sin+0x10>
    10f8:	e8 94       	clt
    10fa:	e0 e0       	ldi	r30, 0x00	; 0
    10fc:	bb 27       	eor	r27, r27
    10fe:	9f 57       	subi	r25, 0x7F	; 127
    1100:	f0 f0       	brcs	.+60     	; 0x113e <__fp_rempio2+0x4c>
    1102:	2a ed       	ldi	r18, 0xDA	; 218
    1104:	3f e0       	ldi	r19, 0x0F	; 15
    1106:	49 ec       	ldi	r20, 0xC9	; 201
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <__fp_rempio2+0x24>
    110a:	ee 0f       	add	r30, r30
    110c:	bb 0f       	add	r27, r27
    110e:	66 1f       	adc	r22, r22
    1110:	77 1f       	adc	r23, r23
    1112:	88 1f       	adc	r24, r24
    1114:	28 f0       	brcs	.+10     	; 0x1120 <__fp_rempio2+0x2e>
    1116:	b2 3a       	cpi	r27, 0xA2	; 162
    1118:	62 07       	cpc	r22, r18
    111a:	73 07       	cpc	r23, r19
    111c:	84 07       	cpc	r24, r20
    111e:	28 f0       	brcs	.+10     	; 0x112a <__fp_rempio2+0x38>
    1120:	b2 5a       	subi	r27, 0xA2	; 162
    1122:	62 0b       	sbc	r22, r18
    1124:	73 0b       	sbc	r23, r19
    1126:	84 0b       	sbc	r24, r20
    1128:	e3 95       	inc	r30
    112a:	9a 95       	dec	r25
    112c:	72 f7       	brpl	.-36     	; 0x110a <__fp_rempio2+0x18>
    112e:	80 38       	cpi	r24, 0x80	; 128
    1130:	30 f4       	brcc	.+12     	; 0x113e <__fp_rempio2+0x4c>
    1132:	9a 95       	dec	r25
    1134:	bb 0f       	add	r27, r27
    1136:	66 1f       	adc	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	88 1f       	adc	r24, r24
    113c:	d2 f7       	brpl	.-12     	; 0x1132 <__fp_rempio2+0x40>
    113e:	90 48       	sbci	r25, 0x80	; 128
    1140:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__fp_mpack_finite>

00001144 <__fp_sinus>:
    1144:	ef 93       	push	r30
    1146:	e0 ff       	sbrs	r30, 0
    1148:	07 c0       	rjmp	.+14     	; 0x1158 <__fp_sinus+0x14>
    114a:	a2 ea       	ldi	r26, 0xA2	; 162
    114c:	2a ed       	ldi	r18, 0xDA	; 218
    114e:	3f e0       	ldi	r19, 0x0F	; 15
    1150:	49 ec       	ldi	r20, 0xC9	; 201
    1152:	5f eb       	ldi	r21, 0xBF	; 191
    1154:	0e 94 c7 08 	call	0x118e	; 0x118e <__addsf3x>
    1158:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fp_round>
    115c:	0f 90       	pop	r0
    115e:	03 94       	inc	r0
    1160:	01 fc       	sbrc	r0, 1
    1162:	90 58       	subi	r25, 0x80	; 128
    1164:	e4 e5       	ldi	r30, 0x54	; 84
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__fp_powsodd>
    116c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__fp_pscA>
    1170:	38 f0       	brcs	.+14     	; 0x1180 <__fp_sinus+0x3c>
    1172:	0e 94 bc 07 	call	0xf78	; 0xf78 <__fp_pscB>
    1176:	20 f0       	brcs	.+8      	; 0x1180 <__fp_sinus+0x3c>
    1178:	39 f4       	brne	.+14     	; 0x1188 <__fp_sinus+0x44>
    117a:	9f 3f       	cpi	r25, 0xFF	; 255
    117c:	19 f4       	brne	.+6      	; 0x1184 <__fp_sinus+0x40>
    117e:	26 f4       	brtc	.+8      	; 0x1188 <__fp_sinus+0x44>
    1180:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__fp_nan>
    1184:	0e f4       	brtc	.+2      	; 0x1188 <__fp_sinus+0x44>
    1186:	e0 95       	com	r30
    1188:	e7 fb       	bst	r30, 7
    118a:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_inf>

0000118e <__addsf3x>:
    118e:	e9 2f       	mov	r30, r25
    1190:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__fp_split3>
    1194:	58 f3       	brcs	.-42     	; 0x116c <__fp_sinus+0x28>
    1196:	ba 17       	cp	r27, r26
    1198:	62 07       	cpc	r22, r18
    119a:	73 07       	cpc	r23, r19
    119c:	84 07       	cpc	r24, r20
    119e:	95 07       	cpc	r25, r21
    11a0:	20 f0       	brcs	.+8      	; 0x11aa <__addsf3x+0x1c>
    11a2:	79 f4       	brne	.+30     	; 0x11c2 <__addsf3x+0x34>
    11a4:	a6 f5       	brtc	.+104    	; 0x120e <__addsf3x+0x80>
    11a6:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_zero>
    11aa:	0e f4       	brtc	.+2      	; 0x11ae <__addsf3x+0x20>
    11ac:	e0 95       	com	r30
    11ae:	0b 2e       	mov	r0, r27
    11b0:	ba 2f       	mov	r27, r26
    11b2:	a0 2d       	mov	r26, r0
    11b4:	0b 01       	movw	r0, r22
    11b6:	b9 01       	movw	r22, r18
    11b8:	90 01       	movw	r18, r0
    11ba:	0c 01       	movw	r0, r24
    11bc:	ca 01       	movw	r24, r20
    11be:	a0 01       	movw	r20, r0
    11c0:	11 24       	eor	r1, r1
    11c2:	ff 27       	eor	r31, r31
    11c4:	59 1b       	sub	r21, r25
    11c6:	99 f0       	breq	.+38     	; 0x11ee <__addsf3x+0x60>
    11c8:	59 3f       	cpi	r21, 0xF9	; 249
    11ca:	50 f4       	brcc	.+20     	; 0x11e0 <__addsf3x+0x52>
    11cc:	50 3e       	cpi	r21, 0xE0	; 224
    11ce:	68 f1       	brcs	.+90     	; 0x122a <__addsf3x+0x9c>
    11d0:	1a 16       	cp	r1, r26
    11d2:	f0 40       	sbci	r31, 0x00	; 0
    11d4:	a2 2f       	mov	r26, r18
    11d6:	23 2f       	mov	r18, r19
    11d8:	34 2f       	mov	r19, r20
    11da:	44 27       	eor	r20, r20
    11dc:	58 5f       	subi	r21, 0xF8	; 248
    11de:	f3 cf       	rjmp	.-26     	; 0x11c6 <__addsf3x+0x38>
    11e0:	46 95       	lsr	r20
    11e2:	37 95       	ror	r19
    11e4:	27 95       	ror	r18
    11e6:	a7 95       	ror	r26
    11e8:	f0 40       	sbci	r31, 0x00	; 0
    11ea:	53 95       	inc	r21
    11ec:	c9 f7       	brne	.-14     	; 0x11e0 <__addsf3x+0x52>
    11ee:	7e f4       	brtc	.+30     	; 0x120e <__addsf3x+0x80>
    11f0:	1f 16       	cp	r1, r31
    11f2:	ba 0b       	sbc	r27, r26
    11f4:	62 0b       	sbc	r22, r18
    11f6:	73 0b       	sbc	r23, r19
    11f8:	84 0b       	sbc	r24, r20
    11fa:	ba f0       	brmi	.+46     	; 0x122a <__addsf3x+0x9c>
    11fc:	91 50       	subi	r25, 0x01	; 1
    11fe:	a1 f0       	breq	.+40     	; 0x1228 <__addsf3x+0x9a>
    1200:	ff 0f       	add	r31, r31
    1202:	bb 1f       	adc	r27, r27
    1204:	66 1f       	adc	r22, r22
    1206:	77 1f       	adc	r23, r23
    1208:	88 1f       	adc	r24, r24
    120a:	c2 f7       	brpl	.-16     	; 0x11fc <__addsf3x+0x6e>
    120c:	0e c0       	rjmp	.+28     	; 0x122a <__addsf3x+0x9c>
    120e:	ba 0f       	add	r27, r26
    1210:	62 1f       	adc	r22, r18
    1212:	73 1f       	adc	r23, r19
    1214:	84 1f       	adc	r24, r20
    1216:	48 f4       	brcc	.+18     	; 0x122a <__addsf3x+0x9c>
    1218:	87 95       	ror	r24
    121a:	77 95       	ror	r23
    121c:	67 95       	ror	r22
    121e:	b7 95       	ror	r27
    1220:	f7 95       	ror	r31
    1222:	9e 3f       	cpi	r25, 0xFE	; 254
    1224:	08 f0       	brcs	.+2      	; 0x1228 <__addsf3x+0x9a>
    1226:	b0 cf       	rjmp	.-160    	; 0x1188 <__fp_sinus+0x44>
    1228:	93 95       	inc	r25
    122a:	88 0f       	add	r24, r24
    122c:	08 f0       	brcs	.+2      	; 0x1230 <__addsf3x+0xa2>
    122e:	99 27       	eor	r25, r25
    1230:	ee 0f       	add	r30, r30
    1232:	97 95       	ror	r25
    1234:	87 95       	ror	r24
    1236:	08 95       	ret

00001238 <__fp_mpack>:
    1238:	9f 3f       	cpi	r25, 0xFF	; 255
    123a:	31 f0       	breq	.+12     	; 0x1248 <__fp_mpack_finite+0xc>

0000123c <__fp_mpack_finite>:
    123c:	91 50       	subi	r25, 0x01	; 1
    123e:	20 f4       	brcc	.+8      	; 0x1248 <__fp_mpack_finite+0xc>
    1240:	87 95       	ror	r24
    1242:	77 95       	ror	r23
    1244:	67 95       	ror	r22
    1246:	b7 95       	ror	r27
    1248:	88 0f       	add	r24, r24
    124a:	91 1d       	adc	r25, r1
    124c:	96 95       	lsr	r25
    124e:	87 95       	ror	r24
    1250:	97 f9       	bld	r25, 7
    1252:	08 95       	ret

00001254 <__fp_powsodd>:
    1254:	9f 93       	push	r25
    1256:	8f 93       	push	r24
    1258:	7f 93       	push	r23
    125a:	6f 93       	push	r22
    125c:	ff 93       	push	r31
    125e:	ef 93       	push	r30
    1260:	9b 01       	movw	r18, r22
    1262:	ac 01       	movw	r20, r24
    1264:	0e 94 02 08 	call	0x1004	; 0x1004 <__mulsf3>
    1268:	ef 91       	pop	r30
    126a:	ff 91       	pop	r31
    126c:	0e 94 3e 09 	call	0x127c	; 0x127c <__fp_powser>
    1270:	2f 91       	pop	r18
    1272:	3f 91       	pop	r19
    1274:	4f 91       	pop	r20
    1276:	5f 91       	pop	r21
    1278:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__mulsf3>

0000127c <__fp_powser>:
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	1f 93       	push	r17
    1282:	0f 93       	push	r16
    1284:	ff 92       	push	r15
    1286:	ef 92       	push	r14
    1288:	df 92       	push	r13
    128a:	7b 01       	movw	r14, r22
    128c:	8c 01       	movw	r16, r24
    128e:	68 94       	set
    1290:	06 c0       	rjmp	.+12     	; 0x129e <__fp_powser+0x22>
    1292:	da 2e       	mov	r13, r26
    1294:	ef 01       	movw	r28, r30
    1296:	0e 94 15 08 	call	0x102a	; 0x102a <__mulsf3x>
    129a:	fe 01       	movw	r30, r28
    129c:	e8 94       	clt
    129e:	a5 91       	lpm	r26, Z+
    12a0:	25 91       	lpm	r18, Z+
    12a2:	35 91       	lpm	r19, Z+
    12a4:	45 91       	lpm	r20, Z+
    12a6:	55 91       	lpm	r21, Z+
    12a8:	a6 f3       	brts	.-24     	; 0x1292 <__fp_powser+0x16>
    12aa:	ef 01       	movw	r28, r30
    12ac:	0e 94 c7 08 	call	0x118e	; 0x118e <__addsf3x>
    12b0:	fe 01       	movw	r30, r28
    12b2:	97 01       	movw	r18, r14
    12b4:	a8 01       	movw	r20, r16
    12b6:	da 94       	dec	r13
    12b8:	69 f7       	brne	.-38     	; 0x1294 <__fp_powser+0x18>
    12ba:	df 90       	pop	r13
    12bc:	ef 90       	pop	r14
    12be:	ff 90       	pop	r15
    12c0:	0f 91       	pop	r16
    12c2:	1f 91       	pop	r17
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <__udivmodsi4>:
    12ca:	a1 e2       	ldi	r26, 0x21	; 33
    12cc:	1a 2e       	mov	r1, r26
    12ce:	aa 1b       	sub	r26, r26
    12d0:	bb 1b       	sub	r27, r27
    12d2:	fd 01       	movw	r30, r26
    12d4:	0d c0       	rjmp	.+26     	; 0x12f0 <__udivmodsi4_ep>

000012d6 <__udivmodsi4_loop>:
    12d6:	aa 1f       	adc	r26, r26
    12d8:	bb 1f       	adc	r27, r27
    12da:	ee 1f       	adc	r30, r30
    12dc:	ff 1f       	adc	r31, r31
    12de:	a2 17       	cp	r26, r18
    12e0:	b3 07       	cpc	r27, r19
    12e2:	e4 07       	cpc	r30, r20
    12e4:	f5 07       	cpc	r31, r21
    12e6:	20 f0       	brcs	.+8      	; 0x12f0 <__udivmodsi4_ep>
    12e8:	a2 1b       	sub	r26, r18
    12ea:	b3 0b       	sbc	r27, r19
    12ec:	e4 0b       	sbc	r30, r20
    12ee:	f5 0b       	sbc	r31, r21

000012f0 <__udivmodsi4_ep>:
    12f0:	66 1f       	adc	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	88 1f       	adc	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	1a 94       	dec	r1
    12fa:	69 f7       	brne	.-38     	; 0x12d6 <__udivmodsi4_loop>
    12fc:	60 95       	com	r22
    12fe:	70 95       	com	r23
    1300:	80 95       	com	r24
    1302:	90 95       	com	r25
    1304:	9b 01       	movw	r18, r22
    1306:	ac 01       	movw	r20, r24
    1308:	bd 01       	movw	r22, r26
    130a:	cf 01       	movw	r24, r30
    130c:	08 95       	ret

0000130e <__muluhisi3>:
    130e:	0e 94 92 09 	call	0x1324	; 0x1324 <__umulhisi3>
    1312:	a5 9f       	mul	r26, r21
    1314:	90 0d       	add	r25, r0
    1316:	b4 9f       	mul	r27, r20
    1318:	90 0d       	add	r25, r0
    131a:	a4 9f       	mul	r26, r20
    131c:	80 0d       	add	r24, r0
    131e:	91 1d       	adc	r25, r1
    1320:	11 24       	eor	r1, r1
    1322:	08 95       	ret

00001324 <__umulhisi3>:
    1324:	a2 9f       	mul	r26, r18
    1326:	b0 01       	movw	r22, r0
    1328:	b3 9f       	mul	r27, r19
    132a:	c0 01       	movw	r24, r0
    132c:	a3 9f       	mul	r26, r19
    132e:	70 0d       	add	r23, r0
    1330:	81 1d       	adc	r24, r1
    1332:	11 24       	eor	r1, r1
    1334:	91 1d       	adc	r25, r1
    1336:	b2 9f       	mul	r27, r18
    1338:	70 0d       	add	r23, r0
    133a:	81 1d       	adc	r24, r1
    133c:	11 24       	eor	r1, r1
    133e:	91 1d       	adc	r25, r1
    1340:	08 95       	ret

00001342 <_exit>:
    1342:	f8 94       	cli

00001344 <__stop_program>:
    1344:	ff cf       	rjmp	.-2      	; 0x1344 <__stop_program>
